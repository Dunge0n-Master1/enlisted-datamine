options no_aot
require ecs
require math.color
require math.base
require DagorMath
require DagorDebug3D
require soundSystem
require soundHash
require DagorConsole
require DagorSystem
require environment_sounds.modules.game_object_sound_common


let BOX_FACES = [[auto float3(-0.5,-0.5,-0.5); float3(-0.5, -0.5, 0.5); float3(0.5, -0.5, 0.5); float3(0.5, -0.5, 0.5); float3(0.5, -0.5, -0.5); float3(-0.5, -0.5, -0.5); float3(-0.5, 0.5, -0.5); float3(-0.5, 0.5, 0.5); float3(0.5, 0.5, 0.5); float3(0.5, 0.5, 0.5); float3(0.5, 0.5, -0.5); float3(-0.5, 0.5, -0.5); float3(-0.5, -0.5, -0.5); float3(-0.5, 0.5, -0.5); float3(0.5, 0.5, -0.5); float3(0.5, 0.5, -0.5); float3(0.5, -0.5, -0.5); float3(-0.5, -0.5, -0.5); float3(-0.5, -0.5, 0.5); float3(-0.5, 0.5, 0.5); float3(0.5, 0.5, 0.5); float3(0.5, 0.5, 0.5); float3(0.5, -0.5, 0.5); float3(-0.5, -0.5, 0.5); float3(-0.5, -0.5, -0.5); float3(-0.5, -0.5, 0.5); float3(-0.5, 0.5, 0.5); float3(-0.5, 0.5, 0.5); float3(-0.5, 0.5, -0.5); float3(-0.5, -0.5, -0.5); float3(0.5, -0.5, -0.5); float3(0.5, -0.5, 0.5); float3(0.5, 0.5, 0.5); float3(0.5, 0.5, 0.5); float3(0.5, 0.5, -0.5); float3(0.5, -0.5, -0.5)]]
let SPHERE_FACES = [[auto float3(0.,-0., 0.5); float3(0.15, -0., 0.48); float3(0., -0.15, 0.48); float3(0.15, -0., 0.48); float3(0.29, -0., 0.4); float3(0.16, -0.16, 0.44); float3(0.15, -0., 0.48); float3(0.16, -0.16, 0.44); float3(0., -0.15, 0.48); float3(0., -0.15, 0.48); float3(0.16, -0.16, 0.44); float3(0., -0.29, 0.4); float3(0.29, -0., 0.4); float3(0.4, -0., 0.29); float3(0.31, -0.17, 0.35); float3(0.29, -0., 0.4); float3(0.31, -0.17, 0.35); float3(0.16, -0.16, 0.44); float3(0.16, -0.16, 0.44); float3(0.31, -0.17, 0.35); float3(0.17, -0.31, 0.35); float3(0.16, -0.16, 0.44); float3(0.17, -0.31, 0.35); float3(0., -0.29, 0.4); float3(0., -0.29, 0.4); float3(0.17, -0.31, 0.35); float3(0., -0.4, 0.29); float3(0.4, -0., 0.29); float3(0.48, -0., 0.15); float3(0.43, -0.17, 0.19); float3(0.4, -0., 0.29); float3(0.43, -0.17, 0.19); float3(0.31, -0.17, 0.35); float3(0.31, -0.17, 0.35); float3(0.43, -0.17, 0.19); float3(0.32, -0.32, 0.21); float3(0.31, -0.17, 0.35); float3(0.32, -0.32, 0.21); float3(0.17, -0.31, 0.35); float3(0.17, -0.31, 0.35); float3(0.32, -0.32, 0.21); float3(0.17, -0.43, 0.19); float3(0.17, -0.31, 0.35); float3(0.17, -0.43, 0.19); float3(0., -0.4, 0.29); float3(0., -0.4, 0.29); float3(0.17, -0.43, 0.19); float3(0., -0.48, 0.15); float3(0.48, -0., 0.15); float3(0.5, -0., 0.); float3(0.48, -0.15, 0.); float3(0.48, -0., 0.15); float3(0.48, -0.15, 0.); float3(0.43, -0.17, 0.19); float3(0.43, -0.17, 0.19); float3(0.48, -0.15, 0.); float3(0.4, -0.29, 0.); float3(0.43, -0.17, 0.19); float3(0.4, -0.29, 0.); float3(0.32, -0.32, 0.21); float3(0.32, -0.32, 0.21); float3(0.4, -0.29, 0.); float3(0.29, -0.4, 0.); float3(0.32, -0.32, 0.21); float3(0.29, -0.4, 0.); float3(0.17, -0.43, 0.19); float3(0.17, -0.43, 0.19); float3(0.29, -0.4, 0.); float3(0.15, -0.48, 0.); float3(0.17, -0.43, 0.19); float3(0.15, -0.48, 0.); float3(0., -0.48, 0.15); float3(0., -0.48, 0.15); float3(0.15, -0.48, 0.); float3(0., -0.5, 0.); float3(0., -0., 0.5); float3(0., -0.15, 0.48); float3(-0.15, -0., 0.48); float3(0., -0.15, 0.48); float3(0., -0.29, 0.4); float3(-0.16, -0.16, 0.44); float3(0., -0.15, 0.48); float3(-0.16, -0.16, 0.44); float3(-0.15, -0., 0.48); float3(-0.15, -0., 0.48); float3(-0.16, -0.16, 0.44); float3(-0.29, -0., 0.4); float3(0., -0.29, 0.4); float3(0., -0.4, 0.29); float3(-0.17, -0.31, 0.35); float3(0., -0.29, 0.4); float3(-0.17, -0.31, 0.35); float3(-0.16, -0.16, 0.44); float3(-0.16, -0.16, 0.44); float3(-0.17, -0.31, 0.35); float3(-0.31, -0.17, 0.35); float3(-0.16, -0.16, 0.44); float3(-0.31, -0.17, 0.35); float3(-0.29, -0., 0.4); float3(-0.29, -0., 0.4); float3(-0.31, -0.17, 0.35); float3(-0.4, -0., 0.29); float3(0., -0.4, 0.29); float3(0., -0.48, 0.15); float3(-0.17, -0.43, 0.19); float3(0., -0.4, 0.29); float3(-0.17, -0.43, 0.19); float3(-0.17, -0.31, 0.35); float3(-0.17, -0.31, 0.35); float3(-0.17, -0.43, 0.19); float3(-0.32, -0.32, 0.21); float3(-0.17, -0.31, 0.35); float3(-0.32, -0.32, 0.21); float3(-0.31, -0.17, 0.35); float3(-0.31, -0.17, 0.35); float3(-0.32, -0.32, 0.21); float3(-0.43, -0.17, 0.19); float3(-0.31, -0.17, 0.35); float3(-0.43, -0.17, 0.19); float3(-0.4, -0., 0.29); float3(-0.4, -0., 0.29); float3(-0.43, -0.17, 0.19); float3(-0.48, -0., 0.15); float3(0., -0.48, 0.15); float3(0., -0.5, 0.); float3(-0.15, -0.48, 0.); float3(0., -0.48, 0.15); float3(-0.15, -0.48, 0.); float3(-0.17, -0.43, 0.19); float3(-0.17, -0.43, 0.19); float3(-0.15, -0.48, 0.); float3(-0.29, -0.4, 0.); float3(-0.17, -0.43, 0.19); float3(-0.29, -0.4, 0.); float3(-0.32, -0.32, 0.21); float3(-0.32, -0.32, 0.21); float3(-0.29, -0.4, 0.); float3(-0.4, -0.29, 0.); float3(-0.32, -0.32, 0.21); float3(-0.4, -0.29, 0.); float3(-0.43, -0.17, 0.19); float3(-0.43, -0.17, 0.19); float3(-0.4, -0.29, 0.); float3(-0.48, -0.15, 0.); float3(-0.43, -0.17, 0.19); float3(-0.48, -0.15, 0.); float3(-0.48, -0., 0.15); float3(-0.48, -0., 0.15); float3(-0.48, -0.15, 0.); float3(-0.5, -0., 0.); float3(0., -0., 0.5); float3(-0.15, -0., 0.48); float3(0., 0.15, 0.48); float3(-0.15, -0., 0.48); float3(-0.29, -0., 0.4); float3(-0.16, 0.16, 0.44); float3(-0.15, -0., 0.48); float3(-0.16, 0.16, 0.44); float3(0., 0.15, 0.48); float3(0., 0.15, 0.48); float3(-0.16, 0.16, 0.44); float3(0., 0.29, 0.4); float3(-0.29, -0., 0.4); float3(-0.4, -0., 0.29); float3(-0.31, 0.17, 0.35); float3(-0.29, -0., 0.4); float3(-0.31, 0.17, 0.35); float3(-0.16, 0.16, 0.44); float3(-0.16, 0.16, 0.44); float3(-0.31, 0.17, 0.35); float3(-0.17, 0.31, 0.35); float3(-0.16, 0.16, 0.44); float3(-0.17, 0.31, 0.35); float3(0., 0.29, 0.4); float3(0., 0.29, 0.4); float3(-0.17, 0.31, 0.35); float3(0., 0.4, 0.29); float3(-0.4, -0., 0.29); float3(-0.48, -0., 0.15); float3(-0.43, 0.17, 0.19); float3(-0.4, -0., 0.29); float3(-0.43, 0.17, 0.19); float3(-0.31, 0.17, 0.35); float3(-0.31, 0.17, 0.35); float3(-0.43, 0.17, 0.19); float3(-0.32, 0.32, 0.21); float3(-0.31, 0.17, 0.35); float3(-0.32, 0.32, 0.21); float3(-0.17, 0.31, 0.35); float3(-0.17, 0.31, 0.35); float3(-0.32, 0.32, 0.21); float3(-0.17, 0.43, 0.19); float3(-0.17, 0.31, 0.35); float3(-0.17, 0.43, 0.19); float3(0., 0.4, 0.29); float3(0., 0.4, 0.29); float3(-0.17, 0.43, 0.19); float3(0., 0.48, 0.15); float3(-0.48, -0., 0.15); float3(-0.5, -0., 0.); float3(-0.48, 0.15, 0.); float3(-0.48, -0., 0.15); float3(-0.48, 0.15, 0.); float3(-0.43, 0.17, 0.19); float3(-0.43, 0.17, 0.19); float3(-0.48, 0.15, 0.); float3(-0.4, 0.29, 0.); float3(-0.43, 0.17, 0.19); float3(-0.4, 0.29, 0.); float3(-0.32, 0.32, 0.21); float3(-0.32, 0.32, 0.21); float3(-0.4, 0.29, 0.); float3(-0.29, 0.4, 0.); float3(-0.32, 0.32, 0.21); float3(-0.29, 0.4, 0.); float3(-0.17, 0.43, 0.19); float3(-0.17, 0.43, 0.19); float3(-0.29, 0.4, 0.); float3(-0.15, 0.48, 0.); float3(-0.17, 0.43, 0.19); float3(-0.15, 0.48, 0.); float3(0., 0.48, 0.15); float3(0., 0.48, 0.15); float3(-0.15, 0.48, 0.); float3(0., 0.5, 0.); float3(0., -0., 0.5); float3(0., 0.15, 0.48); float3(0.15, -0., 0.48); float3(0., 0.15, 0.48); float3(0., 0.29, 0.4); float3(0.16, 0.16, 0.44); float3(0., 0.15, 0.48); float3(0.16, 0.16, 0.44); float3(0.15, -0., 0.48); float3(0.15, -0., 0.48); float3(0.16, 0.16, 0.44); float3(0.29, -0., 0.4); float3(0., 0.29, 0.4); float3(0., 0.4, 0.29); float3(0.17, 0.31, 0.35); float3(0., 0.29, 0.4); float3(0.17, 0.31, 0.35); float3(0.16, 0.16, 0.44); float3(0.16, 0.16, 0.44); float3(0.17, 0.31, 0.35); float3(0.31, 0.17, 0.35); float3(0.16, 0.16, 0.44); float3(0.31, 0.17, 0.35); float3(0.29, -0., 0.4); float3(0.29, -0., 0.4); float3(0.31, 0.17, 0.35); float3(0.4, -0., 0.29); float3(0., 0.4, 0.29); float3(0., 0.48, 0.15); float3(0.17, 0.43, 0.19); float3(0., 0.4, 0.29); float3(0.17, 0.43, 0.19); float3(0.17, 0.31, 0.35); float3(0.17, 0.31, 0.35); float3(0.17, 0.43, 0.19); float3(0.32, 0.32, 0.21); float3(0.17, 0.31, 0.35); float3(0.32, 0.32, 0.21); float3(0.31, 0.17, 0.35); float3(0.31, 0.17, 0.35); float3(0.32, 0.32, 0.21); float3(0.43, 0.17, 0.19); float3(0.31, 0.17, 0.35); float3(0.43, 0.17, 0.19); float3(0.4, -0., 0.29); float3(0.4, -0., 0.29); float3(0.43, 0.17, 0.19); float3(0.48, -0., 0.15); float3(0., 0.48, 0.15); float3(0., 0.5, 0.); float3(0.15, 0.48, 0.); float3(0., 0.48, 0.15); float3(0.15, 0.48, 0.); float3(0.17, 0.43, 0.19); float3(0.17, 0.43, 0.19); float3(0.15, 0.48, 0.); float3(0.29, 0.4, 0.); float3(0.17, 0.43, 0.19); float3(0.29, 0.4, 0.); float3(0.32, 0.32, 0.21); float3(0.32, 0.32, 0.21); float3(0.29, 0.4, 0.); float3(0.4, 0.29, 0.); float3(0.32, 0.32, 0.21); float3(0.4, 0.29, 0.); float3(0.43, 0.17, 0.19); float3(0.43, 0.17, 0.19); float3(0.4, 0.29, 0.); float3(0.48, 0.15, 0.); float3(0.43, 0.17, 0.19); float3(0.48, 0.15, 0.); float3(0.48, -0., 0.15); float3(0.48, -0., 0.15); float3(0.48, 0.15, 0.); float3(0.5, -0., 0.); float3(0., -0., -0.5); float3(0., -0.15, -0.48); float3(0.15, -0., -0.48); float3(0., -0.15, -0.48); float3(0., -0.29, -0.4); float3(0.16, -0.16, -0.44); float3(0., -0.15, -0.48); float3(0.16, -0.16, -0.44); float3(0.15, -0., -0.48); float3(0.15, -0., -0.48); float3(0.16, -0.16, -0.44); float3(0.29, -0., -0.4); float3(0., -0.29, -0.4); float3(0., -0.4, -0.29); float3(0.17, -0.31, -0.35); float3(0., -0.29, -0.4); float3(0.17, -0.31, -0.35); float3(0.16, -0.16, -0.44); float3(0.16, -0.16, -0.44); float3(0.17, -0.31, -0.35); float3(0.31, -0.17, -0.35); float3(0.16, -0.16, -0.44); float3(0.31, -0.17, -0.35); float3(0.29, -0., -0.4); float3(0.29, -0., -0.4); float3(0.31, -0.17, -0.35); float3(0.4, -0., -0.29); float3(0., -0.4, -0.29); float3(0., -0.48, -0.15); float3(0.17, -0.43, -0.19); float3(0., -0.4, -0.29); float3(0.17, -0.43, -0.19); float3(0.17, -0.31, -0.35); float3(0.17, -0.31, -0.35); float3(0.17, -0.43, -0.19); float3(0.32, -0.32, -0.21); float3(0.17, -0.31, -0.35); float3(0.32, -0.32, -0.21); float3(0.31, -0.17, -0.35); float3(0.31, -0.17, -0.35); float3(0.32, -0.32, -0.21); float3(0.43, -0.17, -0.19); float3(0.31, -0.17, -0.35); float3(0.43, -0.17, -0.19); float3(0.4, -0., -0.29); float3(0.4, -0., -0.29); float3(0.43, -0.17, -0.19); float3(0.48, -0., -0.15); float3(0., -0.48, -0.15); float3(0., -0.5, 0.); float3(0.15, -0.48, 0.); float3(0., -0.48, -0.15); float3(0.15, -0.48, 0.); float3(0.17, -0.43, -0.19); float3(0.17, -0.43, -0.19); float3(0.15, -0.48, 0.); float3(0.29, -0.4, 0.); float3(0.17, -0.43, -0.19); float3(0.29, -0.4, 0.); float3(0.32, -0.32, -0.21); float3(0.32, -0.32, -0.21); float3(0.29, -0.4, 0.); float3(0.4, -0.29, 0.); float3(0.32, -0.32, -0.21); float3(0.4, -0.29, 0.); float3(0.43, -0.17, -0.19); float3(0.43, -0.17, -0.19); float3(0.4, -0.29, 0.); float3(0.48, -0.15, 0.); float3(0.43, -0.17, -0.19); float3(0.48, -0.15, 0.); float3(0.48, -0., -0.15); float3(0.48, -0., -0.15); float3(0.48, -0.15, 0.); float3(0.5, -0., 0.); float3(0., -0., -0.5); float3(-0.15, -0., -0.48); float3(0., -0.15, -0.48); float3(-0.15, -0., -0.48); float3(-0.29, -0., -0.4); float3(-0.16, -0.16, -0.44); float3(-0.15, -0., -0.48); float3(-0.16, -0.16, -0.44); float3(0., -0.15, -0.48); float3(0., -0.15, -0.48); float3(-0.16, -0.16, -0.44); float3(0., -0.29, -0.4); float3(-0.29, -0., -0.4); float3(-0.4, -0., -0.29); float3(-0.31, -0.17, -0.35); float3(-0.29, -0., -0.4); float3(-0.31, -0.17, -0.35); float3(-0.16, -0.16, -0.44); float3(-0.16, -0.16, -0.44); float3(-0.31, -0.17, -0.35); float3(-0.17, -0.31, -0.35); float3(-0.16, -0.16, -0.44); float3(-0.17, -0.31, -0.35); float3(0., -0.29, -0.4); float3(0., -0.29, -0.4); float3(-0.17, -0.31, -0.35); float3(0., -0.4, -0.29); float3(-0.4, -0., -0.29); float3(-0.48, -0., -0.15); float3(-0.43, -0.17, -0.19); float3(-0.4, -0., -0.29); float3(-0.43, -0.17, -0.19); float3(-0.31, -0.17, -0.35); float3(-0.31, -0.17, -0.35); float3(-0.43, -0.17, -0.19); float3(-0.32, -0.32, -0.21); float3(-0.31, -0.17, -0.35); float3(-0.32, -0.32, -0.21); float3(-0.17, -0.31, -0.35); float3(-0.17, -0.31, -0.35); float3(-0.32, -0.32, -0.21); float3(-0.17, -0.43, -0.19); float3(-0.17, -0.31, -0.35); float3(-0.17, -0.43, -0.19); float3(0., -0.4, -0.29); float3(0., -0.4, -0.29); float3(-0.17, -0.43, -0.19); float3(0., -0.48, -0.15); float3(-0.48, -0., -0.15); float3(-0.5, -0., 0.); float3(-0.48, -0.15, 0.); float3(-0.48, -0., -0.15); float3(-0.48, -0.15, 0.); float3(-0.43, -0.17, -0.19); float3(-0.43, -0.17, -0.19); float3(-0.48, -0.15, 0.); float3(-0.4, -0.29, 0.); float3(-0.43, -0.17, -0.19); float3(-0.4, -0.29, 0.); float3(-0.32, -0.32, -0.21); float3(-0.32, -0.32, -0.21); float3(-0.4, -0.29, 0.); float3(-0.29, -0.4, 0.); float3(-0.32, -0.32, -0.21); float3(-0.29, -0.4, 0.); float3(-0.17, -0.43, -0.19); float3(-0.17, -0.43, -0.19); float3(-0.29, -0.4, 0.); float3(-0.15, -0.48, 0.); float3(-0.17, -0.43, -0.19); float3(-0.15, -0.48, 0.); float3(0., -0.48, -0.15); float3(0., -0.48, -0.15); float3(-0.15, -0.48, 0.); float3(0., -0.5, 0.); float3(0., -0., -0.5); float3(0., 0.15, -0.48); float3(-0.15, -0., -0.48); float3(0., 0.15, -0.48); float3(0., 0.29, -0.4); float3(-0.16, 0.16, -0.44); float3(0., 0.15, -0.48); float3(-0.16, 0.16, -0.44); float3(-0.15, -0., -0.48); float3(-0.15, -0., -0.48); float3(-0.16, 0.16, -0.44); float3(-0.29, -0., -0.4); float3(0., 0.29, -0.4); float3(0., 0.4, -0.29); float3(-0.17, 0.31, -0.35); float3(0., 0.29, -0.4); float3(-0.17, 0.31, -0.35); float3(-0.16, 0.16, -0.44); float3(-0.16, 0.16, -0.44); float3(-0.17, 0.31, -0.35); float3(-0.31, 0.17, -0.35); float3(-0.16, 0.16, -0.44); float3(-0.31, 0.17, -0.35); float3(-0.29, -0., -0.4); float3(-0.29, -0., -0.4); float3(-0.31, 0.17, -0.35); float3(-0.4, -0., -0.29); float3(0., 0.4, -0.29); float3(0., 0.48, -0.15); float3(-0.17, 0.43, -0.19); float3(0., 0.4, -0.29); float3(-0.17, 0.43, -0.19); float3(-0.17, 0.31, -0.35); float3(-0.17, 0.31, -0.35); float3(-0.17, 0.43, -0.19); float3(-0.32, 0.32, -0.21); float3(-0.17, 0.31, -0.35); float3(-0.32, 0.32, -0.21); float3(-0.31, 0.17, -0.35); float3(-0.31, 0.17, -0.35); float3(-0.32, 0.32, -0.21); float3(-0.43, 0.17, -0.19); float3(-0.31, 0.17, -0.35); float3(-0.43, 0.17, -0.19); float3(-0.4, -0., -0.29); float3(-0.4, -0., -0.29); float3(-0.43, 0.17, -0.19); float3(-0.48, -0., -0.15); float3(0., 0.48, -0.15); float3(0., 0.5, 0.); float3(-0.15, 0.48, 0.); float3(0., 0.48, -0.15); float3(-0.15, 0.48, 0.); float3(-0.17, 0.43, -0.19); float3(-0.17, 0.43, -0.19); float3(-0.15, 0.48, 0.); float3(-0.29, 0.4, 0.); float3(-0.17, 0.43, -0.19); float3(-0.29, 0.4, 0.); float3(-0.32, 0.32, -0.21); float3(-0.32, 0.32, -0.21); float3(-0.29, 0.4, 0.); float3(-0.4, 0.29, 0.); float3(-0.32, 0.32, -0.21); float3(-0.4, 0.29, 0.); float3(-0.43, 0.17, -0.19); float3(-0.43, 0.17, -0.19); float3(-0.4, 0.29, 0.); float3(-0.48, 0.15, 0.); float3(-0.43, 0.17, -0.19); float3(-0.48, 0.15, 0.); float3(-0.48, -0., -0.15); float3(-0.48, -0., -0.15); float3(-0.48, 0.15, 0.); float3(-0.5, -0., 0.); float3(0., -0., -0.5); float3(0.15, -0., -0.48); float3(0., 0.15, -0.48); float3(0.15, -0., -0.48); float3(0.29, -0., -0.4); float3(0.16, 0.16, -0.44); float3(0.15, -0., -0.48); float3(0.16, 0.16, -0.44); float3(0., 0.15, -0.48); float3(0., 0.15, -0.48); float3(0.16, 0.16, -0.44); float3(0., 0.29, -0.4); float3(0.29, -0., -0.4); float3(0.4, -0., -0.29); float3(0.31, 0.17, -0.35); float3(0.29, -0., -0.4); float3(0.31, 0.17, -0.35); float3(0.16, 0.16, -0.44); float3(0.16, 0.16, -0.44); float3(0.31, 0.17, -0.35); float3(0.17, 0.31, -0.35); float3(0.16, 0.16, -0.44); float3(0.17, 0.31, -0.35); float3(0., 0.29, -0.4); float3(0., 0.29, -0.4); float3(0.17, 0.31, -0.35); float3(0., 0.4, -0.29); float3(0.4, -0., -0.29); float3(0.48, -0., -0.15); float3(0.43, 0.17, -0.19); float3(0.4, -0., -0.29); float3(0.43, 0.17, -0.19); float3(0.31, 0.17, -0.35); float3(0.31, 0.17, -0.35); float3(0.43, 0.17, -0.19); float3(0.32, 0.32, -0.21); float3(0.31, 0.17, -0.35); float3(0.32, 0.32, -0.21); float3(0.17, 0.31, -0.35); float3(0.17, 0.31, -0.35); float3(0.32, 0.32, -0.21); float3(0.17, 0.43, -0.19); float3(0.17, 0.31, -0.35); float3(0.17, 0.43, -0.19); float3(0., 0.4, -0.29); float3(0., 0.4, -0.29); float3(0.17, 0.43, -0.19); float3(0., 0.48, -0.15); float3(0.48, -0., -0.15); float3(0.5, -0., 0.); float3(0.48, 0.15, 0.); float3(0.48, -0., -0.15); float3(0.48, 0.15, 0.); float3(0.43, 0.17, -0.19); float3(0.43, 0.17, -0.19); float3(0.48, 0.15, 0.); float3(0.4, 0.29, 0.); float3(0.43, 0.17, -0.19); float3(0.4, 0.29, 0.); float3(0.32, 0.32, -0.21); float3(0.32, 0.32, -0.21); float3(0.4, 0.29, 0.); float3(0.29, 0.4, 0.); float3(0.32, 0.32, -0.21); float3(0.29, 0.4, 0.); float3(0.17, 0.43, -0.19); float3(0.17, 0.43, -0.19); float3(0.29, 0.4, 0.); float3(0.15, 0.48, 0.); float3(0.17, 0.43, -0.19); float3(0.15, 0.48, 0.); float3(0., 0.48, -0.15); float3(0., 0.48, -0.15); float3(0.15, 0.48, 0.); float3(0., 0.5, 0.)]]
let HEMISPHERE_FACES = [[auto float3(0., 0.5,-0.); float3(0.15, 0.48, -0.); float3(0., 0.48, -0.15); float3(0.15, 0.48, -0.); float3(0.29, 0.4, -0.); float3(0.16, 0.44, -0.16); float3(0.15, 0.48, -0.); float3(0.16, 0.44, -0.16); float3(0., 0.48, -0.15); float3(0., 0.48, -0.15); float3(0.16, 0.44, -0.16); float3(0., 0.4, -0.29); float3(0.29, 0.4, -0.); float3(0.4, 0.29, -0.); float3(0.31, 0.35, -0.17); float3(0.29, 0.4, -0.); float3(0.31, 0.35, -0.17); float3(0.16, 0.44, -0.16); float3(0.16, 0.44, -0.16); float3(0.31, 0.35, -0.17); float3(0.17, 0.35, -0.31); float3(0.16, 0.44, -0.16); float3(0.17, 0.35, -0.31); float3(0., 0.4, -0.29); float3(0., 0.4, -0.29); float3(0.17, 0.35, -0.31); float3(0., 0.29, -0.4); float3(0.4, 0.29, -0.); float3(0.48, 0.15, -0.); float3(0.43, 0.19, -0.17); float3(0.4, 0.29, -0.); float3(0.43, 0.19, -0.17); float3(0.31, 0.35, -0.17); float3(0.31, 0.35, -0.17); float3(0.43, 0.19, -0.17); float3(0.32, 0.21, -0.32); float3(0.31, 0.35, -0.17); float3(0.32, 0.21, -0.32); float3(0.17, 0.35, -0.31); float3(0.17, 0.35, -0.31); float3(0.32, 0.21, -0.32); float3(0.17, 0.19, -0.43); float3(0.17, 0.35, -0.31); float3(0.17, 0.19, -0.43); float3(0., 0.29, -0.4); float3(0., 0.29, -0.4); float3(0.17, 0.19, -0.43); float3(0., 0.15, -0.48); float3(0.48, 0.15, -0.); float3(0.5, 0., -0.); float3(0.48, 0., -0.15); float3(0.48, 0.15, -0.); float3(0.48, 0., -0.15); float3(0.43, 0.19, -0.17); float3(0.43, 0.19, -0.17); float3(0.48, 0., -0.15); float3(0.4, 0., -0.29); float3(0.43, 0.19, -0.17); float3(0.4, 0., -0.29); float3(0.32, 0.21, -0.32); float3(0.32, 0.21, -0.32); float3(0.4, 0., -0.29); float3(0.29, 0., -0.4); float3(0.32, 0.21, -0.32); float3(0.29, 0., -0.4); float3(0.17, 0.19, -0.43); float3(0.17, 0.19, -0.43); float3(0.29, 0., -0.4); float3(0.15, 0., -0.48); float3(0.17, 0.19, -0.43); float3(0.15, 0., -0.48); float3(0., 0.15, -0.48); float3(0., 0.15, -0.48); float3(0.15, 0., -0.48); float3(0., 0., -0.5); float3(0., 0.5, -0.); float3(0., 0.48, -0.15); float3(-0.15, 0.48, -0.); float3(0., 0.48, -0.15); float3(0., 0.4, -0.29); float3(-0.16, 0.44, -0.16); float3(0., 0.48, -0.15); float3(-0.16, 0.44, -0.16); float3(-0.15, 0.48, -0.); float3(-0.15, 0.48, -0.); float3(-0.16, 0.44, -0.16); float3(-0.29, 0.4, -0.); float3(0., 0.4, -0.29); float3(0., 0.29, -0.4); float3(-0.17, 0.35, -0.31); float3(0., 0.4, -0.29); float3(-0.17, 0.35, -0.31); float3(-0.16, 0.44, -0.16); float3(-0.16, 0.44, -0.16); float3(-0.17, 0.35, -0.31); float3(-0.31, 0.35, -0.17); float3(-0.16, 0.44, -0.16); float3(-0.31, 0.35, -0.17); float3(-0.29, 0.4, -0.); float3(-0.29, 0.4, -0.); float3(-0.31, 0.35, -0.17); float3(-0.4, 0.29, -0.); float3(0., 0.29, -0.4); float3(0., 0.15, -0.48); float3(-0.17, 0.19, -0.43); float3(0., 0.29, -0.4); float3(-0.17, 0.19, -0.43); float3(-0.17, 0.35, -0.31); float3(-0.17, 0.35, -0.31); float3(-0.17, 0.19, -0.43); float3(-0.32, 0.21, -0.32); float3(-0.17, 0.35, -0.31); float3(-0.32, 0.21, -0.32); float3(-0.31, 0.35, -0.17); float3(-0.31, 0.35, -0.17); float3(-0.32, 0.21, -0.32); float3(-0.43, 0.19, -0.17); float3(-0.31, 0.35, -0.17); float3(-0.43, 0.19, -0.17); float3(-0.4, 0.29, -0.); float3(-0.4, 0.29, -0.); float3(-0.43, 0.19, -0.17); float3(-0.48, 0.15, -0.); float3(0., 0.15, -0.48); float3(0., 0., -0.5); float3(-0.15, 0., -0.48); float3(0., 0.15, -0.48); float3(-0.15, 0., -0.48); float3(-0.17, 0.19, -0.43); float3(-0.17, 0.19, -0.43); float3(-0.15, 0., -0.48); float3(-0.29, 0., -0.4); float3(-0.17, 0.19, -0.43); float3(-0.29, 0., -0.4); float3(-0.32, 0.21, -0.32); float3(-0.32, 0.21, -0.32); float3(-0.29, 0., -0.4); float3(-0.4, 0., -0.29); float3(-0.32, 0.21, -0.32); float3(-0.4, 0., -0.29); float3(-0.43, 0.19, -0.17); float3(-0.43, 0.19, -0.17); float3(-0.4, 0., -0.29); float3(-0.48, 0., -0.15); float3(-0.43, 0.19, -0.17); float3(-0.48, 0., -0.15); float3(-0.48, 0.15, -0.); float3(-0.48, 0.15, -0.); float3(-0.48, 0., -0.15); float3(-0.5, 0., -0.); float3(0., 0.5, -0.); float3(-0.15, 0.48, -0.); float3(0., 0.48, 0.15); float3(-0.15, 0.48, -0.); float3(-0.29, 0.4, -0.); float3(-0.16, 0.44, 0.16); float3(-0.15, 0.48, -0.); float3(-0.16, 0.44, 0.16); float3(0., 0.48, 0.15); float3(0., 0.48, 0.15); float3(-0.16, 0.44, 0.16); float3(0., 0.4, 0.29); float3(-0.29, 0.4, -0.); float3(-0.4, 0.29, -0.); float3(-0.31, 0.35, 0.17); float3(-0.29, 0.4, -0.); float3(-0.31, 0.35, 0.17); float3(-0.16, 0.44, 0.16); float3(-0.16, 0.44, 0.16); float3(-0.31, 0.35, 0.17); float3(-0.17, 0.35, 0.31); float3(-0.16, 0.44, 0.16); float3(-0.17, 0.35, 0.31); float3(0., 0.4, 0.29); float3(0., 0.4, 0.29); float3(-0.17, 0.35, 0.31); float3(0., 0.29, 0.4); float3(-0.4, 0.29, -0.); float3(-0.48, 0.15, -0.); float3(-0.43, 0.19, 0.17); float3(-0.4, 0.29, -0.); float3(-0.43, 0.19, 0.17); float3(-0.31, 0.35, 0.17); float3(-0.31, 0.35, 0.17); float3(-0.43, 0.19, 0.17); float3(-0.32, 0.21, 0.32); float3(-0.31, 0.35, 0.17); float3(-0.32, 0.21, 0.32); float3(-0.17, 0.35, 0.31); float3(-0.17, 0.35, 0.31); float3(-0.32, 0.21, 0.32); float3(-0.17, 0.19, 0.43); float3(-0.17, 0.35, 0.31); float3(-0.17, 0.19, 0.43); float3(0., 0.29, 0.4); float3(0., 0.29, 0.4); float3(-0.17, 0.19, 0.43); float3(0., 0.15, 0.48); float3(-0.48, 0.15, -0.); float3(-0.5, 0., -0.); float3(-0.48, 0., 0.15); float3(-0.48, 0.15, -0.); float3(-0.48, 0., 0.15); float3(-0.43, 0.19, 0.17); float3(-0.43, 0.19, 0.17); float3(-0.48, 0., 0.15); float3(-0.4, 0., 0.29); float3(-0.43, 0.19, 0.17); float3(-0.4, 0., 0.29); float3(-0.32, 0.21, 0.32); float3(-0.32, 0.21, 0.32); float3(-0.4, 0., 0.29); float3(-0.29, 0., 0.4); float3(-0.32, 0.21, 0.32); float3(-0.29, 0., 0.4); float3(-0.17, 0.19, 0.43); float3(-0.17, 0.19, 0.43); float3(-0.29, 0., 0.4); float3(-0.15, 0., 0.48); float3(-0.17, 0.19, 0.43); float3(-0.15, 0., 0.48); float3(0., 0.15, 0.48); float3(0., 0.15, 0.48); float3(-0.15, 0., 0.48); float3(0., 0., 0.5); float3(0., 0.5, -0.); float3(0., 0.48, 0.15); float3(0.15, 0.48, -0.); float3(0., 0.48, 0.15); float3(0., 0.4, 0.29); float3(0.16, 0.44, 0.16); float3(0., 0.48, 0.15); float3(0.16, 0.44, 0.16); float3(0.15, 0.48, -0.); float3(0.15, 0.48, -0.); float3(0.16, 0.44, 0.16); float3(0.29, 0.4, -0.); float3(0., 0.4, 0.29); float3(0., 0.29, 0.4); float3(0.17, 0.35, 0.31); float3(0., 0.4, 0.29); float3(0.17, 0.35, 0.31); float3(0.16, 0.44, 0.16); float3(0.16, 0.44, 0.16); float3(0.17, 0.35, 0.31); float3(0.31, 0.35, 0.17); float3(0.16, 0.44, 0.16); float3(0.31, 0.35, 0.17); float3(0.29, 0.4, -0.); float3(0.29, 0.4, -0.); float3(0.31, 0.35, 0.17); float3(0.4, 0.29, -0.); float3(0., 0.29, 0.4); float3(0., 0.15, 0.48); float3(0.17, 0.19, 0.43); float3(0., 0.29, 0.4); float3(0.17, 0.19, 0.43); float3(0.17, 0.35, 0.31); float3(0.17, 0.35, 0.31); float3(0.17, 0.19, 0.43); float3(0.32, 0.21, 0.32); float3(0.17, 0.35, 0.31); float3(0.32, 0.21, 0.32); float3(0.31, 0.35, 0.17); float3(0.31, 0.35, 0.17); float3(0.32, 0.21, 0.32); float3(0.43, 0.19, 0.17); float3(0.31, 0.35, 0.17); float3(0.43, 0.19, 0.17); float3(0.4, 0.29, -0.); float3(0.4, 0.29, -0.); float3(0.43, 0.19, 0.17); float3(0.48, 0.15, -0.); float3(0., 0.15, 0.48); float3(0., 0., 0.5); float3(0.15, 0., 0.48); float3(0., 0.15, 0.48); float3(0.15, 0., 0.48); float3(0.17, 0.19, 0.43); float3(0.17, 0.19, 0.43); float3(0.15, 0., 0.48); float3(0.29, 0., 0.4); float3(0.17, 0.19, 0.43); float3(0.29, 0., 0.4); float3(0.32, 0.21, 0.32); float3(0.32, 0.21, 0.32); float3(0.29, 0., 0.4); float3(0.4, 0., 0.29); float3(0.32, 0.21, 0.32); float3(0.4, 0., 0.29); float3(0.43, 0.19, 0.17); float3(0.43, 0.19, 0.17); float3(0.4, 0., 0.29); float3(0.48, 0., 0.15); float3(0.43, 0.19, 0.17); float3(0.48, 0., 0.15); float3(0.48, 0.15, -0.); float3(0.48, 0.15, -0.); float3(0.48, 0., 0.15); float3(0.5, 0., -0.)]]
let TUBE_FACES = [[auto float3(0.48, 0.5,-0.15); float3(0.5, 0.5, -0.); float3(0.5, -0.5, -0.); float3(0.5, -0.5, -0.); float3(0.48, -0.5, -0.15); float3(0.48, 0.5, -0.15); float3(0.4, 0.5, -0.29); float3(0.48, 0.5, -0.15); float3(0.48, -0.5, -0.15); float3(0.48, -0.5, -0.15); float3(0.4, -0.5, -0.29); float3(0.4, 0.5, -0.29); float3(0.29, 0.5, -0.4); float3(0.4, 0.5, -0.29); float3(0.4, -0.5, -0.29); float3(0.4, -0.5, -0.29); float3(0.29, -0.5, -0.4); float3(0.29, 0.5, -0.4); float3(0.15, 0.5, -0.48); float3(0.29, 0.5, -0.4); float3(0.29, -0.5, -0.4); float3(0.29, -0.5, -0.4); float3(0.15, -0.5, -0.48); float3(0.15, 0.5, -0.48); float3(0., 0.5, -0.5); float3(0.15, 0.5, -0.48); float3(0.15, -0.5, -0.48); float3(0.15, -0.5, -0.48); float3(0., -0.5, -0.5); float3(0., 0.5, -0.5); float3(-0.15, 0.5, -0.48); float3(0., 0.5, -0.5); float3(0., -0.5, -0.5); float3(0., -0.5, -0.5); float3(-0.15, -0.5, -0.48); float3(-0.15, 0.5, -0.48); float3(-0.29, 0.5, -0.4); float3(-0.15, 0.5, -0.48); float3(-0.15, -0.5, -0.48); float3(-0.15, -0.5, -0.48); float3(-0.29, -0.5, -0.4); float3(-0.29, 0.5, -0.4); float3(-0.4, 0.5, -0.29); float3(-0.29, 0.5, -0.4); float3(-0.29, -0.5, -0.4); float3(-0.29, -0.5, -0.4); float3(-0.4, -0.5, -0.29); float3(-0.4, 0.5, -0.29); float3(-0.48, 0.5, -0.15); float3(-0.4, 0.5, -0.29); float3(-0.4, -0.5, -0.29); float3(-0.4, -0.5, -0.29); float3(-0.48, -0.5, -0.15); float3(-0.48, 0.5, -0.15); float3(-0.5, 0.5, -0.); float3(-0.48, 0.5, -0.15); float3(-0.48, -0.5, -0.15); float3(-0.48, -0.5, -0.15); float3(-0.5, -0.5, -0.); float3(-0.5, 0.5, -0.); float3(-0.48, 0.5, 0.15); float3(-0.5, 0.5, -0.); float3(-0.5, -0.5, -0.); float3(-0.5, -0.5, -0.); float3(-0.48, -0.5, 0.15); float3(-0.48, 0.5, 0.15); float3(-0.4, 0.5, 0.29); float3(-0.48, 0.5, 0.15); float3(-0.48, -0.5, 0.15); float3(-0.48, -0.5, 0.15); float3(-0.4, -0.5, 0.29); float3(-0.4, 0.5, 0.29); float3(-0.29, 0.5, 0.4); float3(-0.4, 0.5, 0.29); float3(-0.4, -0.5, 0.29); float3(-0.4, -0.5, 0.29); float3(-0.29, -0.5, 0.4); float3(-0.29, 0.5, 0.4); float3(-0.15, 0.5, 0.48); float3(-0.29, 0.5, 0.4); float3(-0.29, -0.5, 0.4); float3(-0.29, -0.5, 0.4); float3(-0.15, -0.5, 0.48); float3(-0.15, 0.5, 0.48); float3(0., 0.5, 0.5); float3(-0.15, 0.5, 0.48); float3(-0.15, -0.5, 0.48); float3(-0.15, -0.5, 0.48); float3(0., -0.5, 0.5); float3(0., 0.5, 0.5); float3(0.15, 0.5, 0.48); float3(0., 0.5, 0.5); float3(0., -0.5, 0.5); float3(0., -0.5, 0.5); float3(0.15, -0.5, 0.48); float3(0.15, 0.5, 0.48); float3(0.29, 0.5, 0.4); float3(0.15, 0.5, 0.48); float3(0.15, -0.5, 0.48); float3(0.15, -0.5, 0.48); float3(0.29, -0.5, 0.4); float3(0.29, 0.5, 0.4); float3(0.4, 0.5, 0.29); float3(0.29, 0.5, 0.4); float3(0.29, -0.5, 0.4); float3(0.29, -0.5, 0.4); float3(0.4, -0.5, 0.29); float3(0.4, 0.5, 0.29); float3(0.48, 0.5, 0.15); float3(0.4, 0.5, 0.29); float3(0.4, -0.5, 0.29); float3(0.4, -0.5, 0.29); float3(0.48, -0.5, 0.15); float3(0.48, 0.5, 0.15); float3(0.5, 0.5, -0.); float3(0.48, 0.5, 0.15); float3(0.48, -0.5, 0.15); float3(0.48, -0.5, 0.15); float3(0.5, -0.5, -0.); float3(0.5, 0.5, -0.)]]


let MARK_COLOR = E3DCOLOR(0xFFFFFF00)
let WIRE_COLOR = E3DCOLOR(0xFFFFFF00)
let SOLID_COLOR = E3DCOLOR(0x60FFFF00)
let WIRE_UNDERCOLOR = E3DCOLOR(0xFFFF00FF)


def debug_draw_shape(shape : uint; norm_tm : float3x4; extent : float3; wire_color : E3DCOLOR; solid : bool)
  let twoExtent = extent * 2.

  if shape == sound_hash("sphere")
    var tm = norm_tm
    tm[0] *= twoExtent.x
    tm[1] *= twoExtent.x
    tm[2] *= twoExtent.x
    set_cached_debug_lines_wtm(tm)
    let center = float3(0., 0., 0.)
    draw_cached_debug_sphere(center, 0.5, wire_color, 16)
    if solid
      draw_cached_debug_trilist(SPHERE_FACES, SOLID_COLOR)

  elif shape == sound_hash("capsule")
    var tm = norm_tm
    tm[0] *= twoExtent.x
    tm[1] *= twoExtent.y
    tm[2] *= twoExtent.x
    set_cached_debug_lines_wtm(tm)
    draw_cached_debug_cylinder(IDENT_TM, 0.5, 1., wire_color)
    if solid
      draw_cached_debug_trilist(TUBE_FACES, SOLID_COLOR)

    tm = norm_tm
    tm[0] *= twoExtent.x
    tm[1] *= twoExtent.x
    tm[2] *= twoExtent.x
    tm[3] += norm_tm[1] * extent.y
    set_cached_debug_lines_wtm(tm)
    let center = float3(0., 0., 0.)
    draw_cached_debug_sphere(center, 0.5, wire_color, 16)
    if solid
      draw_cached_debug_trilist(HEMISPHERE_FACES, SOLID_COLOR)

    tm[3] -= norm_tm[1] * twoExtent.y
    var mirrorTm = IDENT_TM
    mirrorTm[1] = -mirrorTm[1]
    tm = tm * mirrorTm
    set_cached_debug_lines_wtm(tm)
    draw_cached_debug_sphere(center, 0.5, wire_color, 16)
    if solid
      draw_cached_debug_trilist(HEMISPHERE_FACES, SOLID_COLOR)

  else//if shape == sound_hash("box")
    var tm = norm_tm
    tm[0] *= twoExtent.x
    tm[1] *= twoExtent.y
    tm[2] *= twoExtent.z
    set_cached_debug_lines_wtm(tm)
    draw_cached_debug_box(BBox3(-float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5)), wire_color)
    if solid
      draw_cached_debug_trilist(BOX_FACES, SOLID_COLOR)


[es(tag=(sound, render, dev), no_order)]
def compound_ambient_sound_debug(act : UpdateStageInfoRenderDebug;
                                 eid : EntityId;
                                 game_object_sound__name : string;
                                 game_object_compound_sound__shapes : UInt32List;
                                 game_object_compound_sound__transforms : TMatrixList;
                                 compound_ambient_sound__closestDistSq : float;
                                 compound_ambient_sound__extents_maxRadiusSq : Point4List)
  if get_enable_debug_draw()
    if compound_ambient_sound__closestDistSq <= 0.
      draw_debug_sphere_buffered(get_listener_pos(), 0.1, E3DCOLOR(0xffffffff), 8, 1)

    begin_draw_cached_debug_lines(false, false, false)
    for norm_tm, shape, extent in game_object_compound_sound__transforms, game_object_compound_sound__shapes, compound_ambient_sound__extents_maxRadiusSq
      add_debug_text_mark(norm_tm[3], "{game_object_sound__name} {getEntityTemplateName(eid)}", -1, 0., MARK_COLOR)
      debug_draw_shape(shape, norm_tm, extent.xyz, WIRE_UNDERCOLOR, false)
    end_draw_cached_debug_lines()

    begin_draw_cached_debug_lines(true, false, false)
    for norm_tm, shape, extent in game_object_compound_sound__transforms, game_object_compound_sound__shapes, compound_ambient_sound__extents_maxRadiusSq
      debug_draw_shape(shape, norm_tm, extent.xyz, WIRE_COLOR, true)
    end_draw_cached_debug_lines()


[es(tag=(sound, render, dev), no_order)]
def volume_ambient_sound_debug(act : UpdateStageInfoRenderDebug;
                               eid : EntityId;
                               game_object_sound__name : string;
                               sound_shape__type : string;
                               var volume_ambient_sound__transform : float3x4&;
                               var volume_ambient_sound__extent_maxRadiusSq : float4&)
  if get_enable_debug_draw()

    query(eid) <| $ [es(REQUIRE=soundShapeDebug)] (transform : float3x4)
      volume_ambient_sound__transform = transform
      volume_ambient_sound__extent_maxRadiusSq.xyz = make_sound_shape(volume_ambient_sound__transform, sound_hash(sound_shape__type))

    add_debug_text_mark(volume_ambient_sound__transform[3], "{game_object_sound__name} {getEntityTemplateName(eid)}", -1, 0., MARK_COLOR)

    begin_draw_cached_debug_lines(false, false, false)
    debug_draw_shape(sound_hash(sound_shape__type), volume_ambient_sound__transform, volume_ambient_sound__extent_maxRadiusSq.xyz, WIRE_UNDERCOLOR, false)
    end_draw_cached_debug_lines()

    begin_draw_cached_debug_lines(true, false, false)
    debug_draw_shape(sound_hash(sound_shape__type), volume_ambient_sound__transform, volume_ambient_sound__extent_maxRadiusSq.xyz, WIRE_COLOR, true)
    end_draw_cached_debug_lines()


[console_cmd(name="sound.print_sound_volumes")]
def sound_debug_print_sound_volumes()
  var text = "sound.print_sound_volumes\n"
  query() <| $ [es(REQUIRE=soundShapeDebug)] (eid : EntityId;
                                              game_object_sound__name : string;
                                              sound_shape__type : string;
                                              transform : float3x4)
    text = "{text}{eid} '{game_object_sound__name}':{sound_shape__type} {transform}\n"
  set_clipboard_ansi_text(text)
  logerr(text)
