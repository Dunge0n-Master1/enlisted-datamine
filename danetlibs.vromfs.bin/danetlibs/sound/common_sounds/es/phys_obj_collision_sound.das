require app
require ecs
require soundEvent
require math.base
require DagorMath
require EnlistedPhysObj
require sound_utils_net.modules.sound_utils_net_events

[es(tag=sound)]
def phys_obj_collision_sound(info : ParallelUpdateFrameDelayed;
                             phys_obj_net_phys : PhysObjActor;
                             phys_obj_collision_sound__threshold : float2 const&;
                             phys_obj_collision_sound__path : string;
                             phys_obj_collision_sound__lifetime : float;
                             phys_obj_collision_sound__omegaMul : float;
                             phys_obj_collision_sound__maxRange : float;
                             var phys_obj_collision_sound__time : float&;
                             var phys_obj_collision_sound__maxImpulse : float&;
                             var phys_obj_collision_sound__event : SoundEvent&;
                             transform : float3x4)
  if !should_play(transform[3], phys_obj_collision_sound__maxRange)
    if is_valid(phys_obj_collision_sound__event.handle)
      release(phys_obj_collision_sound__event.handle)
      phys_obj_collision_sound__maxImpulse = 0.0
    return

  phys_obj_collision_sound__time += info.dt
  if phys_obj_collision_sound__time < 0.
    return

  let dt = float(max(phys_obj_net_phys.phys.currentState.atTick - phys_obj_net_phys.phys.previousState.atTick, 1)) * phys_obj_net_phys.phys.timeStep
  var diffSq = length_sq((phys_obj_net_phys.phys.currentState.omega - phys_obj_net_phys.phys.previousState.omega) * phys_obj_collision_sound__omegaMul)
  if length_sq(phys_obj_net_phys.phys.currentState.velocity) < length_sq(phys_obj_net_phys.phys.previousState.velocity)
    diffSq = max(diffSq, length_sq(phys_obj_net_phys.phys.currentState.velocity - phys_obj_net_phys.phys.previousState.velocity))

  if diffSq > square(phys_obj_collision_sound__threshold.x * dt)
    let impulse = safediv(sqrt(diffSq), dt)
    if !is_valid(phys_obj_collision_sound__event.handle) || phys_obj_collision_sound__time > phys_obj_collision_sound__lifetime
      abandon(phys_obj_collision_sound__event.handle)
      phys_obj_collision_sound__event |> play(phys_obj_collision_sound__path, transform[3])
      phys_obj_collision_sound__maxImpulse = 0.
      phys_obj_collision_sound__time = 0.
    phys_obj_collision_sound__maxImpulse = max(phys_obj_collision_sound__maxImpulse, impulse)

  if is_valid(phys_obj_collision_sound__event.handle)
    set_pos(phys_obj_collision_sound__event.handle, transform[3])
    if phys_obj_collision_sound__threshold.y > phys_obj_collision_sound__threshold.x
      let f = cvt(phys_obj_collision_sound__maxImpulse, phys_obj_collision_sound__threshold.x, phys_obj_collision_sound__threshold.y, 0.0, 1.0)
      set_var(phys_obj_collision_sound__event.handle, "force", f)
    if phys_obj_collision_sound__time > phys_obj_collision_sound__lifetime
      abandon(phys_obj_collision_sound__event.handle)
      phys_obj_collision_sound__maxImpulse = 0.
      phys_obj_collision_sound__time = 0.
