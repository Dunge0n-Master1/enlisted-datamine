
options indenting = 2
options gc
options persistent_heap
require %daslib/strings_boost

var
  DAS_PAK_ROOT = "."
  reqCount = 0

let
  commonMountPointPrefixes <- {{
    "ecs" => "%dasGameLibs/ecs";
    "math" => "%dasGameLibs/math";
    "daslib" => "%dngdas/das/daslib";
    "imgui" => "%dngdas/das/imgui";
    "debug" => "%dngdas/das/debug";
    "remote" => "%dngdas/das/remote"
  }}


[export]
def module_get(req, from:string) : tuple<string;string;string> const
  reqCount += 1
  if reqCount > 1000
    unsafe
      heap_collect(true, false)
    reqCount = 0
  var rs <- split_by_chars(req,"./")
  let path_name = join(rs,"/") + ".das"
  if length(rs) <= 1
    return [[auto req, path_name, ""]]

  let mod_name = rs[length(rs)-1]

  if is_in_aot() && (path_name == "daslib/debug.das" || path_name |> ends_with("profiler.das"))
    return [[auto "", "", ""]]

  if starts_with(req, "%")
    return [[auto mod_name, path_name, ""]]

  let alias_name = rs[length(rs)-1]
  var prefix = commonMountPointPrefixes |> find(rs[0])
  if prefix == null
    prefix = mountPointPrefixes |> find(rs[0])
  if prefix != null
    rs |> erase(0)
    return [[auto mod_name, "{*prefix}/{join(rs,"/")}.das", alias_name]]

  return [[auto mod_name, "{DAS_PAK_ROOT}{join(rs,"/")}.das", alias_name]]


[export]
def include_get(inc, from:string) : string
  return starts_with(inc, "%") ? inc : "{DAS_PAK_ROOT}{inc}"
