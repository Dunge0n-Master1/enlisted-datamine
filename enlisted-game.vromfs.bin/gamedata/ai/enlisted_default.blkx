selector{
  name:t="sub.default"
  selectStrategy:t="ordered"

  reaction{
    event:t="onSquadBehaviourChanged"

    recalculateTree{
    }
  }

  reaction{
    event:t="onPersonalOrder"

    recalculateTree{
    }
  }

  reaction{
    event:t="onBombCanBePlanted"

    sequencer{

      isLeader{
      }

      not{

        isDowned{
        }
      }

      selectNode{
        name:t="plantBomb"
      }
    }
  }

  reaction{
    event:t="onBombCanBeDefused"

    sequencer{

      isLeader{
      }

      not{

        isDowned{
        }
      }

      selectNode{
        name:t="defuseBomb"
      }
    }
  }

  reaction{
    event:t="onPlantBombOrder"

    sequencer{

      not{

        isDowned{
        }
      }

      selectNode{
        name:t="plantBombOrder"
      }
    }
  }

  reaction{
    event:t="onDefuseBombOrder"

    sequencer{

      not{

        isDowned{
        }
      }

      selectNode{
        name:t="defuseBombOrder"
      }
    }
  }

  reaction{
    event:t="onHit"

    sequencer{

      findDanger{
        paramName:t="enemy"
        radiusParamName:t="enemyRadius"
        minDanger:r=0.1
        tag:t="human"
      }

      recalculateTree{
      }
    }
  }

  resetNavPoints{
  }

  setIntVar{
    to:t="assumeDanger"
    value:i=0
  }

  setIntVar{
    to:t="execTarget"
    value:i=0
  }

  setIntVar{
    to:t="maxStanceAtLeast"
    value:i=2
  }

  setIntVar{
    to:t="maxStanceAtLeast"
    value:i=0
  }

  sequencer{
    name:t="plantBomb"

    isLeader{
    }

    not{

      isDowned{
      }
    }

    findNearestActiveBombSiteForPlanting{
      bombSitePosParam:t="bombSitePos"
      bombSiteEidParam:t="bombSiteEid"
    }

    moveToPos{
      posParam:t="bombSitePos"
      sprintTimerRange:p2=10.0, 20.0
      minDistToSprint:r=0.5
      tryClimbing:b=yes
      distThreshold:r=1.0
      avoidAiObstacles:b=no
    }

    plantBombNode{
      bombSiteEidParam:t="bombSiteEid"
    }
  }

  sequencer{
    name:t="defuseBomb"

    isLeader{
    }

    not{

      isDowned{
      }
    }

    findNearestActiveBombSiteForDefusing{
      bombSitePosParam:t="bombSitePos"
      bombSiteEidParam:t="bombSiteEid"
    }

    moveToPos{
      posParam:t="bombSitePos"
      sprintTimerRange:p2=10.0, 20.0
      minDistToSprint:r=0.5
      tryClimbing:b=yes
      distThreshold:r=1.0
      avoidAiObstacles:b=no
    }

    defuseBombNode{
      bombSiteEidParam:t="bombSiteEid"
    }
  }

  sequencer{
    name:t="plantBombOrder"

    not{

      isDowned{
      }
    }

    checkPlantBombOrder{
      bombSitePosParam:t="bombSitePos"
      bombSiteEidParam:t="bombSiteEid"
    }

    resetCover{
    }

    moveToPos{
      posParam:t="bombSitePos"
      sprintTimerRange:p2=10.0, 20.0
      minDistToSprint:r=0.5
      tryClimbing:b=yes
      distThreshold:r=1.0
      avoidAiObstacles:b=no
    }

    plantBombNode{
      bombSiteEidParam:t="bombSiteEid"
    }
  }

  sequencer{
    name:t="defuseBombOrder"

    not{

      isDowned{
      }
    }

    checkDefuseBombOrder{
      bombSitePosParam:t="bombSitePos"
      bombSiteEidParam:t="bombSiteEid"
    }

    resetCover{
    }

    moveToPos{
      posParam:t="bombSitePos"
      sprintTimerRange:p2=10.0, 20.0
      minDistToSprint:r=0.5
      tryClimbing:b=yes
      distThreshold:r=1.0
      avoidAiObstacles:b=no
    }

    defuseBombNode{
      bombSiteEidParam:t="bombSiteEid"
    }
  }

  sequencer{
    name:t="useVehicle"

    reaction{
      event:t="regularCheck"

      selector{
        selectStrategy:t="ordered"
        selectOnSuccess:b=yes

        ifThen{

          not{

            findVehicle{
              posParam:t="wishPosition"
            }
          }

          recalculateTree{
          }
        }

        sequencer{

          checkVehicleSeats{
          }

          break{
          }
        }

        sequencer{
          name:t="in_vehicle_rc"

          isInVehicle{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="downed_rc"

          isDowned{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="burning_rc"

          isBurning{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="leader_rc"

          leaderBehaviour{
            posParam:t="regroupPosition"
          }

          break{
          }
        }

        sequencer{
          name:t="artilery_rc"

          findActiveArtilleryStrike{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="dmg_zone_rc"

          findActiveDamageZone{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="grenade_rc"

          findDangerGrenade{
            grenTargetParam:t="dangerLookAt"
            radius:r=20.0
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="breath_rc"

          isUnderwater{
          }

          not{

            hasBreath{
              ratio:r=0.7
            }
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="ammo_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="ammoRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="ammoRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="heal_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="healRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="healRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="build_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="buildTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="buildTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="artillery_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="artilleryRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="artilleryRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="attack_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="attackTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="attackTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="vehicle_rc"

          findVehicle{
            posParam:t="wishPosition"
          }

          selectNode{
            name:t="useVehicle"
          }
        }

        sequencer{
          name:t="danger_rc"

          selector{
            selectStrategy:t="ordered"
            selectOnSuccess:b=yes

            sequencer{

              findDanger{
                paramName:t="newEnemy"
                radiusParamName:t="enemyRadius"
                minDanger:r=0.1
                tag:t="human"
              }

              copyIntVar{
                to:t="prevShootEnemy"
                from:t="shootEnemy"
              }

              chooseDanger{
                lhsParam:t="shootEnemy"
                rhsParam:t="newEnemy"
                outParam:t="shootEnemy"
                diff:r=0.2
                minDanger:r=0.1
              }

              speak{
                phrase:t="enemyAware"
                timeMinMax:p2=12.0, 20.0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              ifThenElse{

                isVarsIntEqual{
                  lhs:t="prevShootEnemy"
                  rhs:t="shootEnemy"
                }

                continue{
                }

                recalculateTree{
                }
              }
            }

            sequencer{

              checkTarget{
                targetUnitParam:t="shootEnemy"
              }

              setIntVar{
                to:t="shootEnemy"
                value:i=0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              isVarsIntEqual{
                lhs:t="assumeDanger"
                rhs_value:i=0
              }

              recalculateTree{
              }
            }
          }
        }

        not{

          chooseMaxStance{
          }
        }

        not{

          deactivateWeapMod{
          }
        }

        not{

          getRegroupPos{
            posParam:t="regroupPosition"
          }
        }
      }
    }

    findVehicle{
      posParam:t="wishPosition"
    }

    not{

      isDowned{
      }
    }

    resetCover{
    }

    moveToPos{
      posParam:t="wishPosition"
      sprintTimerRange:p2=10.0, 20.0
      minDistToSprint:r=0.5
      tryClimbing:b=yes
      distThreshold:r=1.0
      avoidAiObstacles:b=no
    }
  }

  sequencer{
    name:t="in_vehicle"

    reaction{
      event:t="regularCheck"

      ifThenElse{

        isInVehicle{
        }

        checkVehicleSeats{
        }

        recalculateTree{
        }
      }
    }

    isInVehicle{
    }

    resetCover{
    }

    cycle{

      continue{
      }
    }
  }

  sequencer{
    name:t="self_healing"

    isDowned{
    }

    resetCover{
    }

    setCurrentAiAction{
      state:t="heal"
    }

    useMedkit{
    }
  }

  sequencer{
    name:t="swim_up"

    reaction{
      name:t="swim_up_reaction"
      event:t="regularCheck"

      sequencer{

        findObstaclesAlongsidePath{
        }
      }
    }

    isUnderwater{
    }

    resetCover{
    }

    orderedSelector{

      sequencer{

        not{

          findSwimUpPos{
            posParam:t="swimUpPos"
            swimUpDirParam:t="swimUpDir"
            radius:r=5.0
            tries:i=1
          }
        }

        not{

          hasBreath{
            ratio:r=0.9
          }
        }
      }

      not{

        hasBreath{
          ratio:r=0.7
        }
      }
    }

    findSwimUpPos{
      posParam:t="swimUpPos"
      swimUpDirParam:t="swimUpDir"
      radius:r=5.0
      tries:i=10
    }

    setCurrentAiAction{
      state:t="move"
    }

    parallel{

      moveToPos{
        posParam:t="swimUpPos"
        sprintTimerRange:p2=10.0, 20.0
        minDistToSprint:r=10.0
        distThreshold:r=1.5
        avoidAiObstacles:b=no
      }

      waitSwimUpPos{
        delay:r=0.1
        maxTime:r=4.0
        swimUpDirParam:t="swimUpDir"
      }
    }

    swimUp{
      swimUpDirParam:t="swimUpDir"
    }
  }

  sequencer{
    name:t="throw_grenade"

    not{

      hasBotSquadPlayer{
      }
    }

    hasGrenade{
      enemyType:i=1
    }

    ignoreChance{
      chance:r=0.8
    }

    findTargetsForGrenadeKill{
      grenadeThrowPosParam:t="grenadeThrowPosParam"
    }

    chooseGrenade{
      enemyType:i=1
    }

    throwGrenade{
      targetPosParam:t="grenadeThrowPosParam"
      minThrowDistance:r=1.0
      grenadeThrowDelay:r=50.0
    }
  }

  sequencer{
    name:t="artillery_escape"

    reaction{
      event:t="regularCheck"

      selector{
        selectStrategy:t="ordered"
        selectOnSuccess:b=yes

        sequencer{

          checkVehicleSeats{
          }

          break{
          }
        }

        sequencer{
          name:t="in_vehicle_rc"

          isInVehicle{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="downed_rc"

          isDowned{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="burning_rc"

          isBurning{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="leader_rc"

          leaderBehaviour{
            posParam:t="regroupPosition"
          }

          break{
          }
        }

        sequencer{
          name:t="artilery_rc"

          findActiveArtilleryStrike{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="dmg_zone_rc"

          findActiveDamageZone{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="grenade_rc"

          findDangerGrenade{
            grenTargetParam:t="dangerLookAt"
            radius:r=20.0
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="breath_rc"

          isUnderwater{
          }

          not{

            hasBreath{
              ratio:r=0.7
            }
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="ammo_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="ammoRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="ammoRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="heal_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="healRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="healRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="build_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="buildTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="buildTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="artillery_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="artilleryRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="artilleryRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="attack_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="attackTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="attackTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="vehicle_rc"

          findVehicle{
            posParam:t="wishPosition"
          }

          selectNode{
            name:t="useVehicle"
          }
        }

        sequencer{
          name:t="danger_rc"

          selector{
            selectStrategy:t="ordered"
            selectOnSuccess:b=yes

            sequencer{

              findDanger{
                paramName:t="newEnemy"
                radiusParamName:t="enemyRadius"
                minDanger:r=0.1
                tag:t="human"
              }

              copyIntVar{
                to:t="prevShootEnemy"
                from:t="shootEnemy"
              }

              chooseDanger{
                lhsParam:t="shootEnemy"
                rhsParam:t="newEnemy"
                outParam:t="shootEnemy"
                diff:r=0.2
                minDanger:r=0.1
              }

              speak{
                phrase:t="enemyAware"
                timeMinMax:p2=12.0, 20.0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              ifThenElse{

                isVarsIntEqual{
                  lhs:t="prevShootEnemy"
                  rhs:t="shootEnemy"
                }

                continue{
                }

                recalculateTree{
                }
              }
            }

            sequencer{

              checkTarget{
                targetUnitParam:t="shootEnemy"
              }

              setIntVar{
                to:t="shootEnemy"
                value:i=0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              isVarsIntEqual{
                lhs:t="assumeDanger"
                rhs_value:i=0
              }

              recalculateTree{
              }
            }
          }
        }

        not{

          chooseMaxStance{
          }
        }

        not{

          deactivateWeapMod{
          }
        }

        not{

          getRegroupPos{
            posParam:t="regroupPosition"
          }
        }
      }
    }

    findActiveArtilleryStrike{
      posParam:t="artilleryPosition"
      endTimeParam:t="artilleryEndTime"
    }

    findFallbackNavmeshPoint{
      posParam:t="fallbackPosition"
      dist:r=10.0
      targetPos:t="artilleryPosition"
    }

    resetCover{
    }

    setCurrentAiAction{
      state:t="move"
    }

    moveToPos{
      posParam:t="fallbackPosition"
      sprintTimerRange:p2=10.0, 20.0
      minDistToSprint:r=0.5
      tryClimbing:b=yes
      distThreshold:r=1.0
      avoidAiObstacles:b=no
    }

    waitTo{
      timeParam:t="artilleryEndTime"
    }

    wait{
      range:p2=0.3, 1.0
      resetable:b=yes
    }
  }

  sequencer{
    name:t="construction_site_escape"

    reaction{
      event:t="regularCheck"

      selector{
        selectStrategy:t="ordered"
        selectOnSuccess:b=yes

        sequencer{

          checkVehicleSeats{
          }

          break{
          }
        }

        sequencer{
          name:t="in_vehicle_rc"

          isInVehicle{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="downed_rc"

          isDowned{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="burning_rc"

          isBurning{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="leader_rc"

          leaderBehaviour{
            posParam:t="regroupPosition"
          }

          break{
          }
        }

        sequencer{
          name:t="artilery_rc"

          findActiveArtilleryStrike{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="dmg_zone_rc"

          findActiveDamageZone{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="grenade_rc"

          findDangerGrenade{
            grenTargetParam:t="dangerLookAt"
            radius:r=20.0
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="breath_rc"

          isUnderwater{
          }

          not{

            hasBreath{
              ratio:r=0.7
            }
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="ammo_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="ammoRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="ammoRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="heal_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="healRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="healRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="build_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="buildTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="buildTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="artillery_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="artilleryRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="artilleryRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="attack_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="attackTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="attackTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="vehicle_rc"

          findVehicle{
            posParam:t="wishPosition"
          }

          selectNode{
            name:t="useVehicle"
          }
        }

        sequencer{
          name:t="danger_rc"

          selector{
            selectStrategy:t="ordered"
            selectOnSuccess:b=yes

            sequencer{

              findDanger{
                paramName:t="newEnemy"
                radiusParamName:t="enemyRadius"
                minDanger:r=0.1
                tag:t="human"
              }

              copyIntVar{
                to:t="prevShootEnemy"
                from:t="shootEnemy"
              }

              chooseDanger{
                lhsParam:t="shootEnemy"
                rhsParam:t="newEnemy"
                outParam:t="shootEnemy"
                diff:r=0.2
                minDanger:r=0.1
              }

              speak{
                phrase:t="enemyAware"
                timeMinMax:p2=12.0, 20.0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              ifThenElse{

                isVarsIntEqual{
                  lhs:t="prevShootEnemy"
                  rhs:t="shootEnemy"
                }

                continue{
                }

                recalculateTree{
                }
              }
            }

            sequencer{

              checkTarget{
                targetUnitParam:t="shootEnemy"
              }

              setIntVar{
                to:t="shootEnemy"
                value:i=0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              isVarsIntEqual{
                lhs:t="assumeDanger"
                rhs_value:i=0
              }

              recalculateTree{
              }
            }
          }
        }

        not{

          chooseMaxStance{
          }
        }

        not{

          deactivateWeapMod{
          }
        }

        not{

          getRegroupPos{
            posParam:t="regroupPosition"
          }
        }
      }
    }

    findActiveConstructionSite{
      posParam:t="constructionSitePosition"
    }

    findFallbackNavmeshPoint{
      posParam:t="fallbackPosition"
      dist:r=10.0
      targetPos:t="constructionSitePosition"
    }

    resetCover{
    }

    setCurrentAiAction{
      state:t="move"
    }

    moveToPos{
      posParam:t="fallbackPosition"
      sprintTimerRange:p2=10.0, 20.0
      minDistToSprint:r=0.5
      tryClimbing:b=yes
      distThreshold:r=1.0
      avoidAiObstacles:b=no
    }

    wait{
      range:p2=0.3, 1.0
      resetable:b=yes
    }
  }

  sequencer{
    name:t="dmg_zone_escape"

    reaction{
      event:t="regularCheck"

      selector{
        selectStrategy:t="ordered"
        selectOnSuccess:b=yes

        sequencer{

          checkVehicleSeats{
          }

          break{
          }
        }

        sequencer{
          name:t="in_vehicle_rc"

          isInVehicle{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="downed_rc"

          isDowned{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="burning_rc"

          isBurning{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="leader_rc"

          leaderBehaviour{
            posParam:t="regroupPosition"
          }

          break{
          }
        }

        sequencer{
          name:t="artilery_rc"

          findActiveArtilleryStrike{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="dmg_zone_rc"

          findActiveDamageZone{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="grenade_rc"

          findDangerGrenade{
            grenTargetParam:t="dangerLookAt"
            radius:r=20.0
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="breath_rc"

          isUnderwater{
          }

          not{

            hasBreath{
              ratio:r=0.7
            }
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="ammo_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="ammoRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="ammoRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="heal_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="healRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="healRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="build_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="buildTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="buildTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="artillery_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="artilleryRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="artilleryRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="attack_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="attackTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="attackTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="vehicle_rc"

          findVehicle{
            posParam:t="wishPosition"
          }

          selectNode{
            name:t="useVehicle"
          }
        }

        sequencer{
          name:t="danger_rc"

          selector{
            selectStrategy:t="ordered"
            selectOnSuccess:b=yes

            sequencer{

              findDanger{
                paramName:t="newEnemy"
                radiusParamName:t="enemyRadius"
                minDanger:r=0.1
                tag:t="human"
              }

              copyIntVar{
                to:t="prevShootEnemy"
                from:t="shootEnemy"
              }

              chooseDanger{
                lhsParam:t="shootEnemy"
                rhsParam:t="newEnemy"
                outParam:t="shootEnemy"
                diff:r=0.2
                minDanger:r=0.1
              }

              speak{
                phrase:t="enemyAware"
                timeMinMax:p2=12.0, 20.0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              ifThenElse{

                isVarsIntEqual{
                  lhs:t="prevShootEnemy"
                  rhs:t="shootEnemy"
                }

                continue{
                }

                recalculateTree{
                }
              }
            }

            sequencer{

              checkTarget{
                targetUnitParam:t="shootEnemy"
              }

              setIntVar{
                to:t="shootEnemy"
                value:i=0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              isVarsIntEqual{
                lhs:t="assumeDanger"
                rhs_value:i=0
              }

              recalculateTree{
              }
            }
          }
        }

        not{

          chooseMaxStance{
          }
        }

        not{

          deactivateWeapMod{
          }
        }

        not{

          getRegroupPos{
            posParam:t="regroupPosition"
          }
        }
      }
    }

    findActiveDamageZone{
      safePosParam:t="wishPosition"
    }

    resetCover{
    }

    setCurrentAiAction{
      state:t="move"
    }

    moveToPos{
      posParam:t="wishPosition"
      sprintTimerRange:p2=10.0, 20.0
      minDistToSprint:r=0.5
      tryClimbing:b=yes
      distThreshold:r=1.0
      avoidAiObstacles:b=no
    }
  }

  sequencer{
    name:t="self_extinguish"

    reaction{
      event:t="regularCheck"

      selector{
        selectStrategy:t="ordered"
        selectOnSuccess:b=yes

        sequencer{

          checkVehicleSeats{
          }

          break{
          }
        }

        sequencer{
          name:t="in_vehicle_rc"

          isInVehicle{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="downed_rc"

          isDowned{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="burning_rc"

          isBurning{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="leader_rc"

          leaderBehaviour{
            posParam:t="regroupPosition"
          }

          break{
          }
        }

        sequencer{
          name:t="artilery_rc"

          findActiveArtilleryStrike{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="dmg_zone_rc"

          findActiveDamageZone{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="grenade_rc"

          findDangerGrenade{
            grenTargetParam:t="dangerLookAt"
            radius:r=20.0
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="breath_rc"

          isUnderwater{
          }

          not{

            hasBreath{
              ratio:r=0.7
            }
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="ammo_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="ammoRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="ammoRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="heal_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="healRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="healRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="build_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="buildTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="buildTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="artillery_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="artilleryRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="artilleryRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="attack_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="attackTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="attackTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="vehicle_rc"

          findVehicle{
            posParam:t="wishPosition"
          }

          selectNode{
            name:t="useVehicle"
          }
        }

        sequencer{
          name:t="danger_rc"

          selector{
            selectStrategy:t="ordered"
            selectOnSuccess:b=yes

            sequencer{

              findDanger{
                paramName:t="newEnemy"
                radiusParamName:t="enemyRadius"
                minDanger:r=0.1
                tag:t="human"
              }

              copyIntVar{
                to:t="prevShootEnemy"
                from:t="shootEnemy"
              }

              chooseDanger{
                lhsParam:t="shootEnemy"
                rhsParam:t="newEnemy"
                outParam:t="shootEnemy"
                diff:r=0.2
                minDanger:r=0.1
              }

              speak{
                phrase:t="enemyAware"
                timeMinMax:p2=12.0, 20.0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              ifThenElse{

                isVarsIntEqual{
                  lhs:t="prevShootEnemy"
                  rhs:t="shootEnemy"
                }

                continue{
                }

                recalculateTree{
                }
              }
            }

            sequencer{

              checkTarget{
                targetUnitParam:t="shootEnemy"
              }

              setIntVar{
                to:t="shootEnemy"
                value:i=0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              isVarsIntEqual{
                lhs:t="assumeDanger"
                rhs_value:i=0
              }

              recalculateTree{
              }
            }
          }
        }

        not{

          chooseMaxStance{
          }
        }

        not{

          deactivateWeapMod{
          }
        }

        not{

          getRegroupPos{
            posParam:t="regroupPosition"
          }
        }
      }
    }

    isBurning{
    }

    resetCover{
    }

    setCurrentAiAction{
      state:t="heal"
    }

    extinguish{
    }

    wait{
      range:p2=0.2, 0.4
      resetable:b=yes
    }
  }

  sequencer{
    name:t="grenade_rethrow"

    reaction{
      event:t="regularCheck"

      selector{
        selectStrategy:t="ordered"
        selectOnSuccess:b=yes

        sequencer{

          checkVehicleSeats{
          }

          break{
          }
        }

        sequencer{
          name:t="in_vehicle_rc"

          isInVehicle{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="downed_rc"

          isDowned{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="burning_rc"

          isBurning{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="leader_rc"

          leaderBehaviour{
            posParam:t="regroupPosition"
          }

          break{
          }
        }

        sequencer{
          name:t="artilery_rc"

          findActiveArtilleryStrike{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="dmg_zone_rc"

          findActiveDamageZone{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="grenade_rc"

          findDangerGrenade{
            grenTargetParam:t="dangerLookAt"
            radius:r=20.0
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="breath_rc"

          isUnderwater{
          }

          not{

            hasBreath{
              ratio:r=0.7
            }
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="ammo_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="ammoRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="ammoRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="heal_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="healRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="healRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="build_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="buildTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="buildTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="artillery_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="artilleryRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="artilleryRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="attack_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="attackTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="attackTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="vehicle_rc"

          findVehicle{
            posParam:t="wishPosition"
          }

          selectNode{
            name:t="useVehicle"
          }
        }

        sequencer{
          name:t="danger_rc"

          selector{
            selectStrategy:t="ordered"
            selectOnSuccess:b=yes

            sequencer{

              findDanger{
                paramName:t="newEnemy"
                radiusParamName:t="enemyRadius"
                minDanger:r=0.1
                tag:t="human"
              }

              copyIntVar{
                to:t="prevShootEnemy"
                from:t="shootEnemy"
              }

              chooseDanger{
                lhsParam:t="shootEnemy"
                rhsParam:t="newEnemy"
                outParam:t="shootEnemy"
                diff:r=0.2
                minDanger:r=0.1
              }

              speak{
                phrase:t="enemyAware"
                timeMinMax:p2=12.0, 20.0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              ifThenElse{

                isVarsIntEqual{
                  lhs:t="prevShootEnemy"
                  rhs:t="shootEnemy"
                }

                continue{
                }

                recalculateTree{
                }
              }
            }

            sequencer{

              checkTarget{
                targetUnitParam:t="shootEnemy"
              }

              setIntVar{
                to:t="shootEnemy"
                value:i=0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              isVarsIntEqual{
                lhs:t="assumeDanger"
                rhs_value:i=0
              }

              recalculateTree{
              }
            }
          }
        }

        not{

          chooseMaxStance{
          }
        }

        not{

          deactivateWeapMod{
          }
        }

        not{

          getRegroupPos{
            posParam:t="regroupPosition"
          }
        }
      }
    }

    findDangerGrenade{
      grenTargetParam:t="dangerLookAt"
      radius:r=2.5
      grenExplTime:t="grenExplTime"
    }

    resetCover{
    }

    sequencer{

      setCurrentAiAction{
        state:t="attack"
      }

      parallel{

        reaction{
          event:t="regularCheck"
        }

        throwGrenadeBack{
          grenTargetParam:t="dangerLookAt"
          posParam:t="grenadeThrowPos"
          radius:r=10.0
          minThrowDistance:r=20.0
        }

        sequencer{

          moveToPos{
            posParam:t="grenadeThrowPos"
            sprintTimerRange:p2=10.0, 20.0
            minDistToSprint:r=0.5
            tryClimbing:b=yes
            distThreshold:r=1.0
            avoidAiObstacles:b=no
          }

          wait{
            range:p2=2.0, 2.0
            resetable:b=yes
          }
        }
      }

      changeStance{
        stanceName:t="crawl"
        maxStanceParam:t="maxStance"
      }

      wait{
        range:p2=1.0, 2.0
        resetable:b=yes
      }
    }
  }

  sequencer{
    name:t="grenade_escape"

    reaction{
      event:t="regularCheck"

      selector{
        selectStrategy:t="ordered"
        selectOnSuccess:b=yes

        sequencer{

          checkVehicleSeats{
          }

          break{
          }
        }

        sequencer{
          name:t="in_vehicle_rc"

          isInVehicle{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="downed_rc"

          isDowned{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="burning_rc"

          isBurning{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="leader_rc"

          leaderBehaviour{
            posParam:t="regroupPosition"
          }

          break{
          }
        }

        sequencer{
          name:t="artilery_rc"

          findActiveArtilleryStrike{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="dmg_zone_rc"

          findActiveDamageZone{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="grenade_rc"

          findDangerGrenade{
            grenTargetParam:t="dangerLookAt"
            radius:r=20.0
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="breath_rc"

          isUnderwater{
          }

          not{

            hasBreath{
              ratio:r=0.7
            }
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="ammo_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="ammoRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="ammoRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="heal_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="healRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="healRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="build_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="buildTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="buildTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="artillery_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="artilleryRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="artilleryRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="attack_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="attackTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="attackTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="vehicle_rc"

          findVehicle{
            posParam:t="wishPosition"
          }

          selectNode{
            name:t="useVehicle"
          }
        }

        sequencer{
          name:t="danger_rc"

          selector{
            selectStrategy:t="ordered"
            selectOnSuccess:b=yes

            sequencer{

              findDanger{
                paramName:t="newEnemy"
                radiusParamName:t="enemyRadius"
                minDanger:r=0.1
                tag:t="human"
              }

              copyIntVar{
                to:t="prevShootEnemy"
                from:t="shootEnemy"
              }

              chooseDanger{
                lhsParam:t="shootEnemy"
                rhsParam:t="newEnemy"
                outParam:t="shootEnemy"
                diff:r=0.2
                minDanger:r=0.1
              }

              speak{
                phrase:t="enemyAware"
                timeMinMax:p2=12.0, 20.0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              ifThenElse{

                isVarsIntEqual{
                  lhs:t="prevShootEnemy"
                  rhs:t="shootEnemy"
                }

                continue{
                }

                recalculateTree{
                }
              }
            }

            sequencer{

              checkTarget{
                targetUnitParam:t="shootEnemy"
              }

              setIntVar{
                to:t="shootEnemy"
                value:i=0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              isVarsIntEqual{
                lhs:t="assumeDanger"
                rhs_value:i=0
              }

              recalculateTree{
              }
            }
          }
        }

        not{

          chooseMaxStance{
          }
        }

        not{

          deactivateWeapMod{
          }
        }

        not{

          getRegroupPos{
            posParam:t="regroupPosition"
          }
        }
      }
    }

    findDangerGrenade{
      grenTargetParam:t="dangerLookAt"
      radius:r=20.0
      grenExplTime:t="grenExplTime"
    }

    resetCover{
    }

    sequencer{

      findSafeFromGrenadePos{
        posParam:t="grenadeSafePos"
        grenTargetParam:t="dangerLookAt"
        radius:r=25.0
      }

      setCurrentAiAction{
        state:t="hide"
      }

      parallel{

        lookAtTarget{
          targetUnitParam:t="dangerLookAt"
        }

        wait{
          range:p2=0.0, 1.0
          resetable:b=yes
        }
      }

      parallel{

        lookAtTarget{
          targetUnitParam:t="dangerLookAt"
        }

        wait{
          range:p2=0.0, 0.1
          resetable:b=yes
        }

        moveToPos{
          posParam:t="grenadeSafePos"
          sprintTimerRange:p2=10.0, 20.0
          minDistToSprint:r=10.0
          tryClimbing:b=yes
          maxStanceParam:t="maxStance"
          avoidAiObstacles:b=no
        }
      }

      speak{
        phrase:t="grenadeAware"
        timeMinMax:p2=4.0, 10.0
      }

      moveToPos{
        posParam:t="grenadeSafePos"
        sprintTimerRange:p2=10.0, 20.0
        minDistToSprint:r=0.5
        tryClimbing:b=yes
        maxStanceParam:t="maxStance"
        avoidAiObstacles:b=no
      }

      waitTo{
        timeParam:t="grenExplTime"
      }

      wait{
        range:p2=0.2, 0.4
        resetable:b=yes
      }
    }
  }

  sequencer{
    name:t="melee_attack"

    selectUnit{
      isEnemy:b=yes
      traceTargets:b=yes
      paramName:t="meleeEnemy"
      findClosest:b=yes
      radius:r=1.25
      tag:t="human"
      canBeInVehicle:b=no
    }

    resetCover{
    }

    setCurrentAiAction{
      state:t="attack"
    }

    selector{

      getRandomPointNearTarget{
        targetUnitParam:t="shootEnemy"
        posParam:t="posNearTarget"
      }

      rotateToPoint{
        posParam:t="posNearTarget"
      }

      shootAtUnit{
        targetUnitParam:t="shootEnemy"
        minStance:i=1
        shootTime:p2=0.2, 0.5
        cooldownTime:p2=0.1, 0.9
        minAimTime:p2=0.1, 0.4
        maxStanceParam:t="maxStance"
      }

      sequencer{

        moveToTarget{
          targetUnitParam:t="meleeEnemy"
          stopDistRange:p2=1.5, 1.5
          aimToTarget:b=yes
          maxStanceParam:t="maxStance"
        }

        meleeAttack{
          targetUnitParam:t="meleeEnemy"
          timeToAttack:r=1.0
          attackDist:r=1.5
        }

        wait{
          range:p2=0.5, 1.0
          resetable:b=yes
        }
      }
    }
  }

  sequencer{
    name:t="build_req"

    reaction{
      event:t="regularCheck"

      selector{
        selectStrategy:t="ordered"
        selectOnSuccess:b=yes

        sequencer{

          checkVehicleSeats{
          }

          break{
          }
        }

        sequencer{
          name:t="in_vehicle_rc"

          isInVehicle{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="downed_rc"

          isDowned{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="burning_rc"

          isBurning{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="leader_rc"

          leaderBehaviour{
            posParam:t="regroupPosition"
          }

          break{
          }
        }

        sequencer{
          name:t="artilery_rc"

          findActiveArtilleryStrike{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="dmg_zone_rc"

          findActiveDamageZone{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="grenade_rc"

          findDangerGrenade{
            grenTargetParam:t="dangerLookAt"
            radius:r=20.0
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="breath_rc"

          isUnderwater{
          }

          not{

            hasBreath{
              ratio:r=0.7
            }
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="ammo_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="ammoRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="ammoRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="heal_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="healRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="healRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="build_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="buildTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="buildTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="artillery_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="artilleryRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="artilleryRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="attack_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="attackTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="attackTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="vehicle_rc"

          findVehicle{
            posParam:t="wishPosition"
          }

          selectNode{
            name:t="useVehicle"
          }
        }

        sequencer{
          name:t="danger_rc"

          selector{
            selectStrategy:t="ordered"
            selectOnSuccess:b=yes

            sequencer{

              findDanger{
                paramName:t="newEnemy"
                radiusParamName:t="enemyRadius"
                minDanger:r=0.1
                tag:t="human"
              }

              copyIntVar{
                to:t="prevShootEnemy"
                from:t="shootEnemy"
              }

              chooseDanger{
                lhsParam:t="shootEnemy"
                rhsParam:t="newEnemy"
                outParam:t="shootEnemy"
                diff:r=0.2
                minDanger:r=0.1
              }

              speak{
                phrase:t="enemyAware"
                timeMinMax:p2=12.0, 20.0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              ifThenElse{

                isVarsIntEqual{
                  lhs:t="prevShootEnemy"
                  rhs:t="shootEnemy"
                }

                continue{
                }

                recalculateTree{
                }
              }
            }

            sequencer{

              checkTarget{
                targetUnitParam:t="shootEnemy"
              }

              setIntVar{
                to:t="shootEnemy"
                value:i=0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              isVarsIntEqual{
                lhs:t="assumeDanger"
                rhs_value:i=0
              }

              recalculateTree{
              }
            }
          }
        }

        not{

          chooseMaxStance{
          }
        }

        not{

          deactivateWeapMod{
          }
        }

        not{

          getRegroupPos{
            posParam:t="regroupPosition"
          }
        }
      }
    }

    checkTarget{
      targetUnitParam:t="buildTarget"
      ignoreDead:b=no
    }

    selector{
      selectStrategy:t="ordered"
      selectOnSuccess:b=yes

      not{

        shouldEquipBuildTool{
          targetParam:t="buildTarget"
        }
      }

      findWeaponSlotWithTag{
        tag:t="buildingTool"
        toParam:t="buildToolSlot"
      }
    }

    selector{
      selectStrategy:t="ordered"
      selectOnSuccess:b=yes

      not{

        shouldEquipBuildTool{
          targetParam:t="buildTarget"
        }
      }

      changeWeapon{
        param:t="buildToolSlot"
      }
    }

    resetCover{
    }

    copyIntVar{
      to:t="execTarget"
      from:t="buildTarget"
    }

    setCurrentAiAction{
      state:t="move"
    }

    findPointNearTarget{
      posParam:t="buildPosition"
      dist:p2=2.0, 2.5
      targetParam:t="buildTarget"
      traceTarget:b=no
      reusePrevPos:b=no
    }

    moveToPos{
      posParam:t="buildPosition"
      sprintTimerRange:p2=10.0, 20.0
      minDistToSprint:r=4.0
      distThreshold:r=0.5
      avoidAiObstacles:b=no
    }

    parallel{

      lookAtTarget{
        targetUnitParam:t="buildTarget"
        rotateBody:b=yes
        allowDead:b=yes
      }

      interactWithBuildingTarget{
        targetUnitParam:t="buildTarget"
      }
    }
  }

  sequencer{
    name:t="ammo_req"

    reaction{
      event:t="regularCheck"

      selector{
        selectStrategy:t="ordered"
        selectOnSuccess:b=yes

        sequencer{

          checkVehicleSeats{
          }

          break{
          }
        }

        sequencer{
          name:t="in_vehicle_rc"

          isInVehicle{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="downed_rc"

          isDowned{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="burning_rc"

          isBurning{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="leader_rc"

          leaderBehaviour{
            posParam:t="regroupPosition"
          }

          break{
          }
        }

        sequencer{
          name:t="artilery_rc"

          findActiveArtilleryStrike{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="dmg_zone_rc"

          findActiveDamageZone{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="grenade_rc"

          findDangerGrenade{
            grenTargetParam:t="dangerLookAt"
            radius:r=20.0
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="breath_rc"

          isUnderwater{
          }

          not{

            hasBreath{
              ratio:r=0.7
            }
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="ammo_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="ammoRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="ammoRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="heal_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="healRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="healRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="build_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="buildTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="buildTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="artillery_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="artilleryRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="artilleryRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="attack_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="attackTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="attackTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="vehicle_rc"

          findVehicle{
            posParam:t="wishPosition"
          }

          selectNode{
            name:t="useVehicle"
          }
        }

        sequencer{
          name:t="danger_rc"

          selector{
            selectStrategy:t="ordered"
            selectOnSuccess:b=yes

            sequencer{

              findDanger{
                paramName:t="newEnemy"
                radiusParamName:t="enemyRadius"
                minDanger:r=0.1
                tag:t="human"
              }

              copyIntVar{
                to:t="prevShootEnemy"
                from:t="shootEnemy"
              }

              chooseDanger{
                lhsParam:t="shootEnemy"
                rhsParam:t="newEnemy"
                outParam:t="shootEnemy"
                diff:r=0.2
                minDanger:r=0.1
              }

              speak{
                phrase:t="enemyAware"
                timeMinMax:p2=12.0, 20.0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              ifThenElse{

                isVarsIntEqual{
                  lhs:t="prevShootEnemy"
                  rhs:t="shootEnemy"
                }

                continue{
                }

                recalculateTree{
                }
              }
            }

            sequencer{

              checkTarget{
                targetUnitParam:t="shootEnemy"
              }

              setIntVar{
                to:t="shootEnemy"
                value:i=0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              isVarsIntEqual{
                lhs:t="assumeDanger"
                rhs_value:i=0
              }

              recalculateTree{
              }
            }
          }
        }

        not{

          chooseMaxStance{
          }
        }

        not{

          deactivateWeapMod{
          }
        }

        not{

          getRegroupPos{
            posParam:t="regroupPosition"
          }
        }
      }
    }

    checkTarget{
      targetUnitParam:t="ammoRequester"
    }

    resetCover{
    }

    copyIntVar{
      to:t="execTarget"
      from:t="ammoRequester"
    }

    setCurrentAiAction{
      state:t="move"
    }

    moveToTarget{
      targetUnitParam:t="ammoRequester"
      stopDistRange:p2=2.0, 2.0
      aimToTarget:b=yes
      maxStanceParam:t="maxStance"
    }

    giveAmmo{
      targetUnitParam:t="ammoRequester"
    }

    wait{
      range:p2=0.5, 1.0
      resetable:b=yes
    }
  }

  sequencer{
    name:t="heal_req"

    reaction{
      event:t="regularCheck"

      selector{
        selectStrategy:t="ordered"
        selectOnSuccess:b=yes

        sequencer{

          checkVehicleSeats{
          }

          break{
          }
        }

        sequencer{
          name:t="in_vehicle_rc"

          isInVehicle{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="downed_rc"

          isDowned{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="burning_rc"

          isBurning{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="leader_rc"

          leaderBehaviour{
            posParam:t="regroupPosition"
          }

          break{
          }
        }

        sequencer{
          name:t="artilery_rc"

          findActiveArtilleryStrike{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="dmg_zone_rc"

          findActiveDamageZone{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="grenade_rc"

          findDangerGrenade{
            grenTargetParam:t="dangerLookAt"
            radius:r=20.0
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="breath_rc"

          isUnderwater{
          }

          not{

            hasBreath{
              ratio:r=0.7
            }
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="ammo_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="ammoRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="ammoRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="heal_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="healRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="healRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="build_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="buildTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="buildTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="artillery_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="artilleryRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="artilleryRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="attack_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="attackTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="attackTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="vehicle_rc"

          findVehicle{
            posParam:t="wishPosition"
          }

          selectNode{
            name:t="useVehicle"
          }
        }

        sequencer{
          name:t="danger_rc"

          selector{
            selectStrategy:t="ordered"
            selectOnSuccess:b=yes

            sequencer{

              findDanger{
                paramName:t="newEnemy"
                radiusParamName:t="enemyRadius"
                minDanger:r=0.1
                tag:t="human"
              }

              copyIntVar{
                to:t="prevShootEnemy"
                from:t="shootEnemy"
              }

              chooseDanger{
                lhsParam:t="shootEnemy"
                rhsParam:t="newEnemy"
                outParam:t="shootEnemy"
                diff:r=0.2
                minDanger:r=0.1
              }

              speak{
                phrase:t="enemyAware"
                timeMinMax:p2=12.0, 20.0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              ifThenElse{

                isVarsIntEqual{
                  lhs:t="prevShootEnemy"
                  rhs:t="shootEnemy"
                }

                continue{
                }

                recalculateTree{
                }
              }
            }

            sequencer{

              checkTarget{
                targetUnitParam:t="shootEnemy"
              }

              setIntVar{
                to:t="shootEnemy"
                value:i=0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              isVarsIntEqual{
                lhs:t="assumeDanger"
                rhs_value:i=0
              }

              recalculateTree{
              }
            }
          }
        }

        not{

          chooseMaxStance{
          }
        }

        not{

          deactivateWeapMod{
          }
        }

        not{

          getRegroupPos{
            posParam:t="regroupPosition"
          }
        }
      }
    }

    checkTarget{
      targetUnitParam:t="healRequester"
    }

    resetCover{
    }

    copyIntVar{
      to:t="execTarget"
      from:t="healRequester"
    }

    setCurrentAiAction{
      state:t="move"
    }

    moveToTarget{
      targetUnitParam:t="healRequester"
      stopDistRange:p2=1.5, 1.5
      aimToTarget:b=yes
      maxStanceParam:t="maxStance"
    }

    wait{
      range:p2=0.2, 0.4
      resetable:b=yes
    }

    parallel{

      healTarget{
        targetUnitParam:t="healRequester"
      }

      lookAtTarget{
        targetUnitParam:t="healRequester"
      }
    }
  }

  sequencer{
    name:t="artillery_req"

    checkTarget{
      targetUnitParam:t="artilleryRequester"
    }

    resetCover{
    }

    copyIntVar{
      to:t="execTarget"
      from:t="artilleryRequester"
    }

    setCurrentAiAction{
      state:t="attack"
    }

    prepareArtillery{
      targetUnitParam:t="artilleryRequester"
      shouldSendParamName:t="artilleryShouldSend"
      typeIndexParamName:t="artilleryTypeIndex"
      posEndParamName:t="artilleryPosEnd"
    }
  }

  sequencer{
    name:t="attack_target"

    reaction{
      event:t="regularCheck"

      orderedSelector{
        selectStrategy:t="ordered"
        selectOnSuccess:b=yes

        sequencer{
          name:t="attack_req_rc"

          not{

            checkTarget{
              targetUnitParam:t="attackTarget"
            }
          }

          recalculateTree{
          }
        }

        sequencer{

          checkVehicleSeats{
          }

          break{
          }
        }

        sequencer{
          name:t="in_vehicle_rc"

          isInVehicle{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="downed_rc"

          isDowned{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="burning_rc"

          isBurning{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="leader_rc"

          leaderBehaviour{
            posParam:t="regroupPosition"
          }

          break{
          }
        }

        sequencer{
          name:t="artilery_rc"

          findActiveArtilleryStrike{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="dmg_zone_rc"

          findActiveDamageZone{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="grenade_rc"

          findDangerGrenade{
            grenTargetParam:t="dangerLookAt"
            radius:r=20.0
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="breath_rc"

          isUnderwater{
          }

          not{

            hasBreath{
              ratio:r=0.7
            }
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="ammo_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="ammoRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="ammoRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="heal_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="healRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="healRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="build_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="buildTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="buildTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="artillery_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="artilleryRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="artilleryRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="attack_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="attackTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="attackTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="vehicle_rc"

          findVehicle{
            posParam:t="wishPosition"
          }

          selectNode{
            name:t="useVehicle"
          }
        }

        sequencer{
          name:t="danger_rc"

          selector{
            selectStrategy:t="ordered"
            selectOnSuccess:b=yes

            sequencer{

              findDanger{
                paramName:t="newEnemy"
                radiusParamName:t="enemyRadius"
                minDanger:r=0.1
                tag:t="human"
              }

              copyIntVar{
                to:t="prevShootEnemy"
                from:t="shootEnemy"
              }

              chooseDanger{
                lhsParam:t="shootEnemy"
                rhsParam:t="newEnemy"
                outParam:t="shootEnemy"
                diff:r=0.2
                minDanger:r=0.1
              }

              speak{
                phrase:t="enemyAware"
                timeMinMax:p2=12.0, 20.0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              ifThenElse{

                isVarsIntEqual{
                  lhs:t="prevShootEnemy"
                  rhs:t="shootEnemy"
                }

                continue{
                }

                recalculateTree{
                }
              }
            }

            sequencer{

              checkTarget{
                targetUnitParam:t="shootEnemy"
              }

              setIntVar{
                to:t="shootEnemy"
                value:i=0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              isVarsIntEqual{
                lhs:t="assumeDanger"
                rhs_value:i=0
              }

              recalculateTree{
              }
            }
          }
        }

        not{

          chooseMaxStance{
          }
        }

        not{

          deactivateWeapMod{
          }
        }

        not{

          getRegroupPos{
            posParam:t="regroupPosition"
          }
        }
      }
    }

    checkTarget{
      targetUnitParam:t="attackTarget"
    }

    checkTarget{
      targetUnitParam:t="attackTarget"
    }

    resetCover{
    }

    copyIntVar{
      to:t="execTarget"
      from:t="attackTarget"
    }

    orderedSelector{

      chooseBestWeapon{
        targetParam:t="attackTarget"
      }

      setIntVar{
        to:t="attackTarget"
        value:i=0
      }
    }

    orderedSelector{

      sequencer{

        reaction{
          event:t="regularCheck"

          orderedSelector{
            selectStrategy:t="ordered"
            selectOnSuccess:b=yes

            sequencer{

              checkVehicleSeats{
              }

              break{
              }
            }

            sequencer{
              name:t="in_vehicle_rc"

              isInVehicle{
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="downed_rc"

              isDowned{
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="burning_rc"

              isBurning{
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="leader_rc"

              leaderBehaviour{
                posParam:t="regroupPosition"
              }

              break{
              }
            }

            sequencer{
              name:t="artilery_rc"

              findActiveArtilleryStrike{
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="dmg_zone_rc"

              findActiveDamageZone{
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="grenade_rc"

              findDangerGrenade{
                grenTargetParam:t="dangerLookAt"
                radius:r=20.0
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="breath_rc"

              isUnderwater{
              }

              not{

                hasBreath{
                  ratio:r=0.7
                }
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="ammo_req_rc"

              not{

                isVarsIntEqual{
                  lhs:t="execTarget"
                  rhs:t="ammoRequester"
                }
              }

              checkTarget{
                targetUnitParam:t="ammoRequester"
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="heal_req_rc"

              not{

                isVarsIntEqual{
                  lhs:t="execTarget"
                  rhs:t="healRequester"
                }
              }

              checkTarget{
                targetUnitParam:t="healRequester"
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="build_req_rc"

              not{

                isVarsIntEqual{
                  lhs:t="execTarget"
                  rhs:t="buildTarget"
                }
              }

              checkTarget{
                targetUnitParam:t="buildTarget"
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="artillery_req_rc"

              not{

                isVarsIntEqual{
                  lhs:t="execTarget"
                  rhs:t="artilleryRequester"
                }
              }

              checkTarget{
                targetUnitParam:t="artilleryRequester"
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="attack_req_rc"

              not{

                isVarsIntEqual{
                  lhs:t="execTarget"
                  rhs:t="attackTarget"
                }
              }

              checkTarget{
                targetUnitParam:t="attackTarget"
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="vehicle_rc"

              findVehicle{
                posParam:t="wishPosition"
              }

              selectNode{
                name:t="useVehicle"
              }
            }

            sequencer{
              name:t="danger_rc"

              selector{
                selectStrategy:t="ordered"
                selectOnSuccess:b=yes

                sequencer{

                  findDanger{
                    paramName:t="newEnemy"
                    radiusParamName:t="enemyRadius"
                    minDanger:r=0.1
                    tag:t="human"
                  }

                  copyIntVar{
                    to:t="prevShootEnemy"
                    from:t="shootEnemy"
                  }

                  chooseDanger{
                    lhsParam:t="shootEnemy"
                    rhsParam:t="newEnemy"
                    outParam:t="shootEnemy"
                    diff:r=0.2
                    minDanger:r=0.1
                  }

                  speak{
                    phrase:t="enemyAware"
                    timeMinMax:p2=12.0, 20.0
                  }

                  chooseBestWeapon{
                    targetParam:t="shootEnemy"
                  }

                  ifThenElse{

                    isVarsIntEqual{
                      lhs:t="prevShootEnemy"
                      rhs:t="shootEnemy"
                    }

                    continue{
                    }

                    recalculateTree{
                    }
                  }
                }

                sequencer{

                  checkTarget{
                    targetUnitParam:t="shootEnemy"
                  }

                  setIntVar{
                    to:t="shootEnemy"
                    value:i=0
                  }

                  chooseBestWeapon{
                    targetParam:t="shootEnemy"
                  }

                  isVarsIntEqual{
                    lhs:t="assumeDanger"
                    rhs_value:i=0
                  }

                  recalculateTree{
                  }
                }
              }
            }

            not{

              chooseMaxStance{
              }
            }

            not{

              deactivateWeapMod{
              }
            }

            not{

              getRegroupPos{
                posParam:t="regroupPosition"
              }
            }

            selectNode{
              name:t="one_shoot_attack"
            }
          }
        }

        moveToPos{
          posParam:t="attackPosition"
          sprintTimerRange:p2=10.0, 20.0
          minDistToSprint:r=1.5
          targetParam:t="shootEnemy"
          timeToLookAtTarget:r=1.0
          lookVisc:r=0.1
          tryClimbing:b=yes
          distThreshold:r=0.5
          maxStanceParam:t="maxStance"
          avoidAiObstacles:b=no
        }
      }

      orderedSelector{

        moveToPos{
          posParam:t="attackPosition"
          sprintTimerRange:p2=10.0, 20.0
          minDistToSprint:r=1.5
          targetParam:t="attackTarget"
          timeToLookAtTarget:r=4.0
          lookVisc:r=0.1
          tryClimbing:b=yes
          maxStanceParam:t="maxStance"
          avoidAiObstacles:b=no
        }

        continue{
        }
      }
    }

    orderedSelector{

      sequencer{

        reaction{
          event:t="regularCheck"

          findPointNearTarget{
            posParam:t="attackPosition"
            dist:p2=20.0, 30.0
            targetParam:t="attackTarget"
            traceTarget:b=yes
            reusePrevPos:b=yes
          }
        }

        chooseBestWeapon{
          targetParam:t="attackTarget"
        }

        wait{
          range:p2=0.1, 0.3
          resetable:b=yes
        }

        wait{
          range:p2=0.1, 0.2
          resetable:b=yes
        }

        orderedSelector{

          throwGrenade{
            targetUnitParam:t="attackTarget"
            minThrowDistance:r=1.0
          }

          sequencer{

            findPointNearTarget{
              posParam:t="attackPosition"
              dist:p2=20.0, 30.0
              targetParam:t="attackTarget"
              traceTarget:b=yes
              reusePrevPos:b=no
            }

            moveToPos{
              posParam:t="attackPosition"
              sprintTimerRange:p2=10.0, 20.0
              minDistToSprint:r=1.5
              targetParam:t="attackTarget"
              timeToLookAtTarget:r=2.0
              lookVisc:r=0.1
              tryClimbing:b=yes
              maxStanceParam:t="maxStance"
              avoidAiObstacles:b=no
            }

            throwGrenade{
              targetUnitParam:t="attackTarget"
              minThrowDistance:r=1.0
            }
          }
        }

        setIntVar{
          to:t="attackTarget"
          value:i=0
        }
      }
    }

    setCurrentAiAction{
      state:t="attack"
    }

    findPointNearTarget{
      posParam:t="attackPosition"
      dist:p2=15.0, 18.0
      targetParam:t="attackTarget"
      traceTarget:b=yes
      reusePrevPos:b=yes
    }
  }

  sequencer{
    name:t="enemy_attack"

    reaction{
      event:t="regularCheck"

      selector{
        selectStrategy:t="ordered"
        selectOnSuccess:b=yes

        sequencer{

          checkVehicleSeats{
          }

          break{
          }
        }

        sequencer{
          name:t="in_vehicle_rc"

          isInVehicle{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="downed_rc"

          isDowned{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="burning_rc"

          isBurning{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="leader_rc"

          leaderBehaviour{
            posParam:t="regroupPosition"
          }

          break{
          }
        }

        sequencer{
          name:t="artilery_rc"

          findActiveArtilleryStrike{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="dmg_zone_rc"

          findActiveDamageZone{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="grenade_rc"

          findDangerGrenade{
            grenTargetParam:t="dangerLookAt"
            radius:r=20.0
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="breath_rc"

          isUnderwater{
          }

          not{

            hasBreath{
              ratio:r=0.7
            }
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="ammo_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="ammoRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="ammoRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="heal_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="healRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="healRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="build_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="buildTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="buildTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="artillery_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="artilleryRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="artilleryRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="attack_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="attackTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="attackTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="vehicle_rc"

          findVehicle{
            posParam:t="wishPosition"
          }

          selectNode{
            name:t="useVehicle"
          }
        }

        sequencer{
          name:t="danger_rc"

          selector{
            selectStrategy:t="ordered"
            selectOnSuccess:b=yes

            sequencer{

              findDanger{
                paramName:t="newEnemy"
                radiusParamName:t="enemyRadius"
                minDanger:r=0.1
                tag:t="human"
              }

              copyIntVar{
                to:t="prevShootEnemy"
                from:t="shootEnemy"
              }

              chooseDanger{
                lhsParam:t="shootEnemy"
                rhsParam:t="newEnemy"
                outParam:t="shootEnemy"
                diff:r=0.2
                minDanger:r=0.1
              }

              speak{
                phrase:t="enemyAware"
                timeMinMax:p2=12.0, 20.0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              ifThenElse{

                isVarsIntEqual{
                  lhs:t="prevShootEnemy"
                  rhs:t="shootEnemy"
                }

                continue{
                }

                recalculateTree{
                }
              }
            }

            sequencer{

              checkTarget{
                targetUnitParam:t="shootEnemy"
              }

              setIntVar{
                to:t="shootEnemy"
                value:i=0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              isVarsIntEqual{
                lhs:t="assumeDanger"
                rhs_value:i=0
              }

              recalculateTree{
              }
            }
          }
        }

        sequencer{

          isInSquadLeaderAim{
          }

          resetCover{
          }

          recalculateTree{
          }
        }

        not{

          chooseMaxStance{
          }
        }

        not{

          deactivateWeapMod{
          }
        }

        not{

          getRegroupPos{
            posParam:t="regroupPosition"
          }
        }

        findObstaclesAlongsidePath{
        }
      }
    }

    reaction{
      event:t="onEnemyPlayerNear"

      sequencer{

        findDanger{
          paramName:t="shootEnemy"
          radiusParamName:t="enemyNearRadius"
          minDanger:r=0.1
          tag:t="human"
        }

        selectNode{
          name:t="one_shoot_attack"
        }
      }
    }

    isAgressiveBehaviour{
    }

    findDanger{
      paramName:t="shootEnemy"
      radiusParamName:t="enemyRadius"
      minDanger:r=0.1
      outDangerParam:t="outDanger"
      tag:t="human"
    }

    getFollowPosition{
      posParam:t="followPos"
    }

    orderedSelector{

      checkDistance{
        posParam:t="followPos"
        radius:r=25.0
        yRadius:r=2.5
      }

      checkDistance{
        posParam:t="potentialEnemyPos"
        radius:r=20.0
      }

      not{

        isVarsRealLess{
          lhs:t="outDanger"
          rhs_value:r=10.0
        }
      }

      not{

        setPosFromEntity{
          to:t="potentialEnemyPos"
          from:t="shootEnemy"
        }
      }
    }

    orderedSelector{

      sequencer{
        name:t="attack_from_cover"

        not{

          isVarsRealLess{
            lhs:t="outDanger"
            rhs_value:r=1.0
          }
        }

        orderedSelector{

          not{

            isLeader{
            }
          }

          not{

            isVarsRealLess{
              lhs:t="outDanger"
              rhs_value:r=3.0
            }
          }
        }

        orderedSelector{

          not{

            setPosFromEntity{
              to:t="potentialEnemyPos"
              from:t="shootEnemy"
            }
          }

          not{

            checkDistance{
              posParam:t="potentialEnemyPos"
              radius:r=10.0
            }
          }
        }

        orderedSelector{

          checkCover{
            coverPosParam:t="wishPosition"
            targetUnitParam:t="shootEnemy"
            dangerRadius:r=0.0
            dangerMinNoiseLevel:r=3.0
          }

          findCover{
            radius:r=8.0
            dangerRadius:r=0.0
            dangerMinNoiseLevel:r=3.0
            coverPosParam:t="wishPosition"
            targetUnitParam:t="shootEnemy"
          }
        }

        orderedSelector{

          sequencer{

            checkDistance{
              posParam:t="wishPosition"
              radius:r=2.0
              yRadius:r=2.5
            }

            getRandomPointNearTarget{
              targetUnitParam:t="shootEnemy"
              posParam:t="posNearTarget"
            }

            rotateToPoint{
              posParam:t="posNearTarget"
            }

            shootAtUnit{
              targetUnitParam:t="shootEnemy"
              minStance:i=0
              shootCycles:i=1
              tryToSaveCurrentStance:b=no
              minStanceChance:r=1.5
              shootTime:p2=0.2, 0.5
              cooldownTime:p2=0.1, 0.9
              minAimTime:p2=0.1, 0.4
              maxStanceParam:t="maxStance"
            }
          }

          continue{
          }
        }

        orderedSelector{

          isVarsIntEqual{
            lhs:t="maxStance"
            rhs_value:i=0
          }

          sequencer{

            setIntVar{
              to:t="assumeDanger"
              value:i=1
            }

            setIntVar{
              to:t="assumeDanger"
              value:i=0
            }

            moveToPos{
              posParam:t="wishPosition"
              sprintTimerRange:p2=10.0, 20.0
              minDistToSprint:r=1.5
              timeToLookAtTarget:r=4.0
              lookVisc:r=0.1
              tryClimbing:b=yes
              maxStanceParam:t="maxStance"
              distThreshold:r=0.5
              avoidAiObstacles:b=no
            }
          }
        }

        getFollowPosition{
          posParam:t="followPos"
        }

        checkDistance{
          posParam:t="followPos"
          radius:r=20.0
          yRadius:r=2.5
        }

        isInCover{
        }

        setCurrentAiAction{
          state:t="in_cover"
        }

        sequencer{

          reaction{
            event:t="regularCheck"
          }

          orderedSelector{

            setPosFromEntity{
              to:t="potentialEnemyPos"
              from:t="shootEnemy"
            }

            findPotentialEnemyPos{
              posParam:t="potentialEnemyPos"
              minNoiseLevel:r=3.0
            }

            findDangerAttractionPos{
              posParam:t="potentialEnemyPos"
              radius:r=0.0
              minNoiseLevel:r=3.0
            }
          }

          orderedSelector{

            strafeMove{
              posParam:t="coverPos"
              stanceParam:t="coverStance"
              aim:b=yes
              straightMove:b=yes
              dangerPos:t="potentialEnemyPos"
            }

            continue{
            }
          }

          findPotentialEnemyDirectionEntryPoint{
            posParam:t="potentialEnemyPos"
          }

          getCoverPosition{
            coverPosParam:t="coverPos"
          }

          selectStanceInCover{
            maxStanceParam:t="maxStance"
            stanceParam:t="coverStance"
            safe:b=yes
          }

          selectStanceInCover{
            maxStanceParam:t="maxStance"
            stanceParam:t="coverStance"
            safe:b=no
          }

          strafeMove{
            posParam:t="coverPos"
            stanceParam:t="coverStance"
            aim:b=no
            dangerPos:t="potentialEnemyPos"
          }

          parallel{

            wait{
              range:p2=0.8, 1.2
              resetable:b=yes
            }

            wanderLook{
              posParam:t="potentialEnemyPos"
              range:p2=0.2, 0.1
              maxStanceParam:t="coverStance"
            }
          }

          getCoverShootPosition{
            coverPosParam:t="coverPos"
          }

          chooseMaxStance{
          }

          changeStance{
            stanceName:t="stand"
            maxStanceParam:t="coverStance"
          }

          sequencer{

            reaction{
              event:t="regularCheck"

              selector{
                selectStrategy:t="ordered"
                selectOnSuccess:b=yes

                sequencer{

                  checkVehicleSeats{
                  }

                  break{
                  }
                }

                sequencer{
                  name:t="in_vehicle_rc"

                  isInVehicle{
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="downed_rc"

                  isDowned{
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="burning_rc"

                  isBurning{
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="leader_rc"

                  leaderBehaviour{
                    posParam:t="regroupPosition"
                  }

                  break{
                  }
                }

                sequencer{
                  name:t="artilery_rc"

                  findActiveArtilleryStrike{
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="dmg_zone_rc"

                  findActiveDamageZone{
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="grenade_rc"

                  findDangerGrenade{
                    grenTargetParam:t="dangerLookAt"
                    radius:r=20.0
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="breath_rc"

                  isUnderwater{
                  }

                  not{

                    hasBreath{
                      ratio:r=0.7
                    }
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="ammo_req_rc"

                  not{

                    isVarsIntEqual{
                      lhs:t="execTarget"
                      rhs:t="ammoRequester"
                    }
                  }

                  checkTarget{
                    targetUnitParam:t="ammoRequester"
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="heal_req_rc"

                  not{

                    isVarsIntEqual{
                      lhs:t="execTarget"
                      rhs:t="healRequester"
                    }
                  }

                  checkTarget{
                    targetUnitParam:t="healRequester"
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="build_req_rc"

                  not{

                    isVarsIntEqual{
                      lhs:t="execTarget"
                      rhs:t="buildTarget"
                    }
                  }

                  checkTarget{
                    targetUnitParam:t="buildTarget"
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="artillery_req_rc"

                  not{

                    isVarsIntEqual{
                      lhs:t="execTarget"
                      rhs:t="artilleryRequester"
                    }
                  }

                  checkTarget{
                    targetUnitParam:t="artilleryRequester"
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="attack_req_rc"

                  not{

                    isVarsIntEqual{
                      lhs:t="execTarget"
                      rhs:t="attackTarget"
                    }
                  }

                  checkTarget{
                    targetUnitParam:t="attackTarget"
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="vehicle_rc"

                  findVehicle{
                    posParam:t="wishPosition"
                  }

                  selectNode{
                    name:t="useVehicle"
                  }
                }

                sequencer{
                  name:t="danger_rc"

                  selector{
                    selectStrategy:t="ordered"
                    selectOnSuccess:b=yes

                    sequencer{

                      findDanger{
                        paramName:t="newEnemy"
                        radiusParamName:t="enemyRadius"
                        minDanger:r=0.1
                        tag:t="human"
                      }

                      copyIntVar{
                        to:t="prevShootEnemy"
                        from:t="shootEnemy"
                      }

                      chooseDanger{
                        lhsParam:t="shootEnemy"
                        rhsParam:t="newEnemy"
                        outParam:t="shootEnemy"
                        diff:r=0.2
                        minDanger:r=0.1
                      }

                      speak{
                        phrase:t="enemyAware"
                        timeMinMax:p2=12.0, 20.0
                      }

                      chooseBestWeapon{
                        targetParam:t="shootEnemy"
                      }

                      ifThenElse{

                        isVarsIntEqual{
                          lhs:t="prevShootEnemy"
                          rhs:t="shootEnemy"
                        }

                        continue{
                        }

                        recalculateTree{
                        }
                      }
                    }

                    sequencer{

                      checkTarget{
                        targetUnitParam:t="shootEnemy"
                      }

                      setIntVar{
                        to:t="shootEnemy"
                        value:i=0
                      }

                      chooseBestWeapon{
                        targetParam:t="shootEnemy"
                      }

                      isVarsIntEqual{
                        lhs:t="assumeDanger"
                        rhs_value:i=0
                      }

                      recalculateTree{
                      }
                    }
                  }
                }

                not{

                  chooseMaxStance{
                  }
                }

                not{

                  deactivateWeapMod{
                  }
                }

                not{

                  getRegroupPos{
                    posParam:t="regroupPosition"
                  }
                }
              }
            }

            reaction{
              event:t="onEnemyPlayerNear"

              sequencer{

                findDanger{
                  paramName:t="shootEnemy"
                  radiusParamName:t="enemyNearRadius"
                  minDanger:r=0.1
                  tag:t="human"
                }

                selectNode{
                  name:t="one_shoot_attack"
                }
              }
            }

            setIntVar{
              to:t="tmpShootEnemy"
              value:i=0
            }

            cycle{

              sequencer{

                findDanger{
                  paramName:t="shootEnemy"
                  radiusParamName:t="enemyRadius"
                  minDanger:r=0.1
                  tag:t="human"
                }

                copyIntVar{
                  to:t="tmpShootEnemy"
                  from:t="shootEnemy"
                }

                getRandomPointNearTarget{
                  targetUnitParam:t="shootEnemy"
                  posParam:t="posNearTarget"
                }

                rotateToPoint{
                  posParam:t="posNearTarget"
                }

                shootAtUnit{
                  targetUnitParam:t="shootEnemy"
                  minStance:i=0
                  tryToSaveCurrentStance:b=no
                  minStanceChance:r=1.5
                  shootTime:p2=0.2, 0.5
                  cooldownTime:p2=0.1, 0.9
                  minAimTime:p2=0.1, 0.4
                  maxStanceParam:t="coverStance"
                }
              }
            }

            orderedSelector{

              setPosFromEntity{
                to:t="potentialEnemyPos"
                from:t="tmpShootEnemy"
              }

              findPotentialEnemyPos{
                posParam:t="potentialEnemyPos"
                minNoiseLevel:r=3.0
              }

              findDangerAttractionPos{
                posParam:t="potentialEnemyPos"
                radius:r=0.0
                minNoiseLevel:r=3.0
              }
            }

            findPotentialEnemyDirectionEntryPoint{
              posParam:t="potentialEnemyPos"
            }

            parallel{

              wait{
                range:p2=1.0, 2.0
                resetable:b=yes
              }

              wanderLook{
                posParam:t="potentialEnemyPos"
                range:p2=0.2, 0.1
                maxStanceParam:t="coverStance"
              }
            }
          }
        }
      }

      sequencer{
        name:t="uncovered_shoot"

        reaction{
          event:t="regularCheck"

          selector{
            selectStrategy:t="ordered"
            selectOnSuccess:b=yes

            sequencer{

              checkVehicleSeats{
              }

              break{
              }
            }

            sequencer{
              name:t="in_vehicle_rc"

              isInVehicle{
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="downed_rc"

              isDowned{
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="burning_rc"

              isBurning{
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="leader_rc"

              leaderBehaviour{
                posParam:t="regroupPosition"
              }

              break{
              }
            }

            sequencer{
              name:t="artilery_rc"

              findActiveArtilleryStrike{
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="dmg_zone_rc"

              findActiveDamageZone{
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="grenade_rc"

              findDangerGrenade{
                grenTargetParam:t="dangerLookAt"
                radius:r=20.0
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="breath_rc"

              isUnderwater{
              }

              not{

                hasBreath{
                  ratio:r=0.7
                }
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="ammo_req_rc"

              not{

                isVarsIntEqual{
                  lhs:t="execTarget"
                  rhs:t="ammoRequester"
                }
              }

              checkTarget{
                targetUnitParam:t="ammoRequester"
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="heal_req_rc"

              not{

                isVarsIntEqual{
                  lhs:t="execTarget"
                  rhs:t="healRequester"
                }
              }

              checkTarget{
                targetUnitParam:t="healRequester"
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="build_req_rc"

              not{

                isVarsIntEqual{
                  lhs:t="execTarget"
                  rhs:t="buildTarget"
                }
              }

              checkTarget{
                targetUnitParam:t="buildTarget"
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="artillery_req_rc"

              not{

                isVarsIntEqual{
                  lhs:t="execTarget"
                  rhs:t="artilleryRequester"
                }
              }

              checkTarget{
                targetUnitParam:t="artilleryRequester"
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="attack_req_rc"

              not{

                isVarsIntEqual{
                  lhs:t="execTarget"
                  rhs:t="attackTarget"
                }
              }

              checkTarget{
                targetUnitParam:t="attackTarget"
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="vehicle_rc"

              findVehicle{
                posParam:t="wishPosition"
              }

              selectNode{
                name:t="useVehicle"
              }
            }

            sequencer{
              name:t="danger_rc"

              selector{
                selectStrategy:t="ordered"
                selectOnSuccess:b=yes

                sequencer{

                  findDanger{
                    paramName:t="newEnemy"
                    radiusParamName:t="enemyRadius"
                    minDanger:r=0.1
                    tag:t="human"
                  }

                  copyIntVar{
                    to:t="prevShootEnemy"
                    from:t="shootEnemy"
                  }

                  chooseDanger{
                    lhsParam:t="shootEnemy"
                    rhsParam:t="newEnemy"
                    outParam:t="shootEnemy"
                    diff:r=0.2
                    minDanger:r=0.1
                  }

                  speak{
                    phrase:t="enemyAware"
                    timeMinMax:p2=12.0, 20.0
                  }

                  chooseBestWeapon{
                    targetParam:t="shootEnemy"
                  }

                  ifThenElse{

                    isVarsIntEqual{
                      lhs:t="prevShootEnemy"
                      rhs:t="shootEnemy"
                    }

                    continue{
                    }

                    recalculateTree{
                    }
                  }
                }

                sequencer{

                  checkTarget{
                    targetUnitParam:t="shootEnemy"
                  }

                  setIntVar{
                    to:t="shootEnemy"
                    value:i=0
                  }

                  chooseBestWeapon{
                    targetParam:t="shootEnemy"
                  }

                  isVarsIntEqual{
                    lhs:t="assumeDanger"
                    rhs_value:i=0
                  }

                  recalculateTree{
                  }
                }
              }
            }

            not{

              chooseMaxStance{
              }
            }

            not{

              deactivateWeapMod{
              }
            }

            not{

              getRegroupPos{
                posParam:t="regroupPosition"
              }
            }
          }
        }

        reaction{
          event:t="onEnemyPlayerNear"

          sequencer{

            findDanger{
              paramName:t="shootEnemy"
              radiusParamName:t="enemyNearRadius"
              minDanger:r=0.1
              tag:t="human"
            }

            selectNode{
              name:t="one_shoot_attack"
            }
          }
        }

        setIntVar{
          to:t="assumeDanger"
          value:i=0
        }

        resetCover{
        }

        orderedSelector{
          name:t="shoot_at_unit_crawl"

          not{

            isVarsIntEqual{
              lhs:t="maxStance"
              rhs_value:i=0
            }
          }

          sequencer{

            getRandomPointNearTarget{
              targetUnitParam:t="shootEnemy"
              posParam:t="posNearTarget"
            }

            rotateToPoint{
              posParam:t="posNearTarget"
            }

            shootAtUnit{
              targetUnitParam:t="shootEnemy"
              minStance:i=0
              tryToSaveCurrentStance:b=no
              minStanceChance:r=1.5
              shootTime:p2=0.2, 0.5
              cooldownTime:p2=0.1, 0.9
              minAimTime:p2=0.1, 0.4
              maxStanceParam:t="maxStance"
            }

            break{
            }
          }
        }

        selector{
          selectStrategy:t="ordered"

          sequencer{
            name:t="move_and_shoot"

            not{

              checkDistance{
                posParam:t="regroupPosition"
                radiusParam:t="regroupDistance"
                yRadius:r=2.5
              }
            }

            reaction{
              event:t="regularCheck"

              selector{
                selectStrategy:t="ordered"
                selectOnSuccess:b=yes

                sequencer{

                  checkVehicleSeats{
                  }

                  break{
                  }
                }

                sequencer{
                  name:t="in_vehicle_rc"

                  isInVehicle{
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="downed_rc"

                  isDowned{
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="burning_rc"

                  isBurning{
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="leader_rc"

                  leaderBehaviour{
                    posParam:t="regroupPosition"
                  }

                  break{
                  }
                }

                sequencer{
                  name:t="artilery_rc"

                  findActiveArtilleryStrike{
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="dmg_zone_rc"

                  findActiveDamageZone{
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="grenade_rc"

                  findDangerGrenade{
                    grenTargetParam:t="dangerLookAt"
                    radius:r=20.0
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="breath_rc"

                  isUnderwater{
                  }

                  not{

                    hasBreath{
                      ratio:r=0.7
                    }
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="ammo_req_rc"

                  not{

                    isVarsIntEqual{
                      lhs:t="execTarget"
                      rhs:t="ammoRequester"
                    }
                  }

                  checkTarget{
                    targetUnitParam:t="ammoRequester"
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="heal_req_rc"

                  not{

                    isVarsIntEqual{
                      lhs:t="execTarget"
                      rhs:t="healRequester"
                    }
                  }

                  checkTarget{
                    targetUnitParam:t="healRequester"
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="build_req_rc"

                  not{

                    isVarsIntEqual{
                      lhs:t="execTarget"
                      rhs:t="buildTarget"
                    }
                  }

                  checkTarget{
                    targetUnitParam:t="buildTarget"
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="artillery_req_rc"

                  not{

                    isVarsIntEqual{
                      lhs:t="execTarget"
                      rhs:t="artilleryRequester"
                    }
                  }

                  checkTarget{
                    targetUnitParam:t="artilleryRequester"
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="attack_req_rc"

                  not{

                    isVarsIntEqual{
                      lhs:t="execTarget"
                      rhs:t="attackTarget"
                    }
                  }

                  checkTarget{
                    targetUnitParam:t="attackTarget"
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="vehicle_rc"

                  findVehicle{
                    posParam:t="wishPosition"
                  }

                  selectNode{
                    name:t="useVehicle"
                  }
                }

                sequencer{
                  name:t="danger_rc"

                  selector{
                    selectStrategy:t="ordered"
                    selectOnSuccess:b=yes

                    sequencer{

                      findDanger{
                        paramName:t="newEnemy"
                        radiusParamName:t="enemyRadius"
                        minDanger:r=0.1
                        tag:t="human"
                      }

                      copyIntVar{
                        to:t="prevShootEnemy"
                        from:t="shootEnemy"
                      }

                      chooseDanger{
                        lhsParam:t="shootEnemy"
                        rhsParam:t="newEnemy"
                        outParam:t="shootEnemy"
                        diff:r=0.2
                        minDanger:r=0.1
                      }

                      speak{
                        phrase:t="enemyAware"
                        timeMinMax:p2=12.0, 20.0
                      }

                      chooseBestWeapon{
                        targetParam:t="shootEnemy"
                      }

                      ifThenElse{

                        isVarsIntEqual{
                          lhs:t="prevShootEnemy"
                          rhs:t="shootEnemy"
                        }

                        continue{
                        }

                        recalculateTree{
                        }
                      }
                    }

                    sequencer{

                      checkTarget{
                        targetUnitParam:t="shootEnemy"
                      }

                      setIntVar{
                        to:t="shootEnemy"
                        value:i=0
                      }

                      chooseBestWeapon{
                        targetParam:t="shootEnemy"
                      }

                      isVarsIntEqual{
                        lhs:t="assumeDanger"
                        rhs_value:i=0
                      }

                      recalculateTree{
                      }
                    }
                  }
                }

                sequencer{

                  not{

                    isVarsRealLess{
                      lhs:t="outDanger"
                      rhs_value:r=1.0
                    }
                  }

                  orderedSelector{

                    not{

                      isLeader{
                      }
                    }

                    not{

                      isVarsRealLess{
                        lhs:t="outDanger"
                        rhs_value:r=3.0
                      }
                    }
                  }

                  orderedSelector{

                    not{

                      setPosFromEntity{
                        to:t="potentialEnemyPos"
                        from:t="shootEnemy"
                      }
                    }

                    not{

                      checkDistance{
                        posParam:t="potentialEnemyPos"
                        radius:r=10.0
                      }
                    }
                  }

                  getFollowPosition{
                    posParam:t="followPos"
                  }

                  checkDistance{
                    posParam:t="followPos"
                    radius:r=20.0
                    yRadius:r=2.5
                  }

                  findCover{
                    radius:r=8.0
                    dangerRadius:r=0.0
                    dangerMinNoiseLevel:r=3.0
                    coverPosParam:t="wishPosition"
                    targetUnitParam:t="shootEnemy"
                  }

                  recalculateTree{
                  }
                }

                not{

                  chooseMaxStance{
                  }
                }

                not{

                  deactivateWeapMod{
                  }
                }

                not{

                  getRegroupPos{
                    posParam:t="regroupPosition"
                  }
                }

                findObstaclesAlongsidePath{
                }
              }
            }

            sequencer{

              reaction{
                event:t="onTraceableDanger"

                selectNode{
                  name:t="one_shoot_attack"
                }
              }

              reaction{
                event:t="onBulletNearby"

                selectNode{
                  name:t="one_shoot_attack"
                }
              }

              reaction{
                event:t="onEnemyPlayerNear"

                sequencer{

                  findDanger{
                    paramName:t="shootEnemy"
                    radiusParamName:t="enemyNearRadius"
                    minDanger:r=0.1
                    tag:t="human"
                  }

                  selectNode{
                    name:t="one_shoot_attack"
                  }
                }
              }

              reaction{
                event:t="regularCheck"

                orderedSelector{
                  selectStrategy:t="ordered"
                  selectOnSuccess:b=yes

                  sequencer{

                    checkVehicleSeats{
                    }

                    break{
                    }
                  }

                  sequencer{
                    name:t="in_vehicle_rc"

                    isInVehicle{
                    }

                    recalculateTree{
                    }
                  }

                  sequencer{
                    name:t="downed_rc"

                    isDowned{
                    }

                    recalculateTree{
                    }
                  }

                  sequencer{
                    name:t="burning_rc"

                    isBurning{
                    }

                    recalculateTree{
                    }
                  }

                  sequencer{
                    name:t="leader_rc"

                    leaderBehaviour{
                      posParam:t="regroupPosition"
                    }

                    break{
                    }
                  }

                  sequencer{
                    name:t="artilery_rc"

                    findActiveArtilleryStrike{
                    }

                    recalculateTree{
                    }
                  }

                  sequencer{
                    name:t="dmg_zone_rc"

                    findActiveDamageZone{
                    }

                    recalculateTree{
                    }
                  }

                  sequencer{
                    name:t="grenade_rc"

                    findDangerGrenade{
                      grenTargetParam:t="dangerLookAt"
                      radius:r=20.0
                    }

                    recalculateTree{
                    }
                  }

                  sequencer{
                    name:t="breath_rc"

                    isUnderwater{
                    }

                    not{

                      hasBreath{
                        ratio:r=0.7
                      }
                    }

                    recalculateTree{
                    }
                  }

                  sequencer{
                    name:t="ammo_req_rc"

                    not{

                      isVarsIntEqual{
                        lhs:t="execTarget"
                        rhs:t="ammoRequester"
                      }
                    }

                    checkTarget{
                      targetUnitParam:t="ammoRequester"
                    }

                    recalculateTree{
                    }
                  }

                  sequencer{
                    name:t="heal_req_rc"

                    not{

                      isVarsIntEqual{
                        lhs:t="execTarget"
                        rhs:t="healRequester"
                      }
                    }

                    checkTarget{
                      targetUnitParam:t="healRequester"
                    }

                    recalculateTree{
                    }
                  }

                  sequencer{
                    name:t="build_req_rc"

                    not{

                      isVarsIntEqual{
                        lhs:t="execTarget"
                        rhs:t="buildTarget"
                      }
                    }

                    checkTarget{
                      targetUnitParam:t="buildTarget"
                    }

                    recalculateTree{
                    }
                  }

                  sequencer{
                    name:t="artillery_req_rc"

                    not{

                      isVarsIntEqual{
                        lhs:t="execTarget"
                        rhs:t="artilleryRequester"
                      }
                    }

                    checkTarget{
                      targetUnitParam:t="artilleryRequester"
                    }

                    recalculateTree{
                    }
                  }

                  sequencer{
                    name:t="attack_req_rc"

                    not{

                      isVarsIntEqual{
                        lhs:t="execTarget"
                        rhs:t="attackTarget"
                      }
                    }

                    checkTarget{
                      targetUnitParam:t="attackTarget"
                    }

                    recalculateTree{
                    }
                  }

                  sequencer{
                    name:t="vehicle_rc"

                    findVehicle{
                      posParam:t="wishPosition"
                    }

                    selectNode{
                      name:t="useVehicle"
                    }
                  }

                  sequencer{
                    name:t="danger_rc"

                    selector{
                      selectStrategy:t="ordered"
                      selectOnSuccess:b=yes

                      sequencer{

                        findDanger{
                          paramName:t="newEnemy"
                          radiusParamName:t="enemyRadius"
                          minDanger:r=0.1
                          tag:t="human"
                        }

                        copyIntVar{
                          to:t="prevShootEnemy"
                          from:t="shootEnemy"
                        }

                        chooseDanger{
                          lhsParam:t="shootEnemy"
                          rhsParam:t="newEnemy"
                          outParam:t="shootEnemy"
                          diff:r=0.2
                          minDanger:r=0.1
                        }

                        speak{
                          phrase:t="enemyAware"
                          timeMinMax:p2=12.0, 20.0
                        }

                        chooseBestWeapon{
                          targetParam:t="shootEnemy"
                        }

                        ifThenElse{

                          isVarsIntEqual{
                            lhs:t="prevShootEnemy"
                            rhs:t="shootEnemy"
                          }

                          continue{
                          }

                          recalculateTree{
                          }
                        }
                      }

                      sequencer{

                        checkTarget{
                          targetUnitParam:t="shootEnemy"
                        }

                        setIntVar{
                          to:t="shootEnemy"
                          value:i=0
                        }

                        chooseBestWeapon{
                          targetParam:t="shootEnemy"
                        }

                        isVarsIntEqual{
                          lhs:t="assumeDanger"
                          rhs_value:i=0
                        }

                        recalculateTree{
                        }
                      }
                    }
                  }

                  not{

                    chooseMaxStance{
                    }
                  }

                  not{

                    deactivateWeapMod{
                    }
                  }

                  not{

                    getRegroupPos{
                      posParam:t="regroupPosition"
                    }
                  }

                  selectNode{
                    name:t="one_shoot_attack"
                  }
                }
              }

              getOrderPosition{
                posParam:t="regroupPosition"
                orderPosParam:t="wishPosition"
              }

              moveToPos{
                posParam:t="wishPosition"
                sprintTimerRange:p2=10.0, 20.0
                minDistToSprint:r=1.5
                targetParam:t="shootEnemy"
                timeToLookAtTarget:r=1.0
                lookVisc:r=0.1
                tryClimbing:b=yes
                distThreshold:r=0.5
                maxStanceParam:t="maxStance"
                avoidAiObstacles:b=no
              }
            }
          }

          selector{
            selectStrategy:t="random"

            reaction{
              event:t="regularCheck"

              selector{
                selectStrategy:t="ordered"
                selectOnSuccess:b=yes

                sequencer{

                  checkVehicleSeats{
                  }

                  break{
                  }
                }

                sequencer{
                  name:t="in_vehicle_rc"

                  isInVehicle{
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="downed_rc"

                  isDowned{
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="burning_rc"

                  isBurning{
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="leader_rc"

                  leaderBehaviour{
                    posParam:t="regroupPosition"
                  }

                  break{
                  }
                }

                sequencer{
                  name:t="artilery_rc"

                  findActiveArtilleryStrike{
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="dmg_zone_rc"

                  findActiveDamageZone{
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="grenade_rc"

                  findDangerGrenade{
                    grenTargetParam:t="dangerLookAt"
                    radius:r=20.0
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="breath_rc"

                  isUnderwater{
                  }

                  not{

                    hasBreath{
                      ratio:r=0.7
                    }
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="ammo_req_rc"

                  not{

                    isVarsIntEqual{
                      lhs:t="execTarget"
                      rhs:t="ammoRequester"
                    }
                  }

                  checkTarget{
                    targetUnitParam:t="ammoRequester"
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="heal_req_rc"

                  not{

                    isVarsIntEqual{
                      lhs:t="execTarget"
                      rhs:t="healRequester"
                    }
                  }

                  checkTarget{
                    targetUnitParam:t="healRequester"
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="build_req_rc"

                  not{

                    isVarsIntEqual{
                      lhs:t="execTarget"
                      rhs:t="buildTarget"
                    }
                  }

                  checkTarget{
                    targetUnitParam:t="buildTarget"
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="artillery_req_rc"

                  not{

                    isVarsIntEqual{
                      lhs:t="execTarget"
                      rhs:t="artilleryRequester"
                    }
                  }

                  checkTarget{
                    targetUnitParam:t="artilleryRequester"
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="attack_req_rc"

                  not{

                    isVarsIntEqual{
                      lhs:t="execTarget"
                      rhs:t="attackTarget"
                    }
                  }

                  checkTarget{
                    targetUnitParam:t="attackTarget"
                  }

                  recalculateTree{
                  }
                }

                sequencer{
                  name:t="vehicle_rc"

                  findVehicle{
                    posParam:t="wishPosition"
                  }

                  selectNode{
                    name:t="useVehicle"
                  }
                }

                sequencer{
                  name:t="danger_rc"

                  selector{
                    selectStrategy:t="ordered"
                    selectOnSuccess:b=yes

                    sequencer{

                      findDanger{
                        paramName:t="newEnemy"
                        radiusParamName:t="enemyRadius"
                        minDanger:r=0.1
                        tag:t="human"
                      }

                      copyIntVar{
                        to:t="prevShootEnemy"
                        from:t="shootEnemy"
                      }

                      chooseDanger{
                        lhsParam:t="shootEnemy"
                        rhsParam:t="newEnemy"
                        outParam:t="shootEnemy"
                        diff:r=0.2
                        minDanger:r=0.1
                      }

                      speak{
                        phrase:t="enemyAware"
                        timeMinMax:p2=12.0, 20.0
                      }

                      chooseBestWeapon{
                        targetParam:t="shootEnemy"
                      }

                      ifThenElse{

                        isVarsIntEqual{
                          lhs:t="prevShootEnemy"
                          rhs:t="shootEnemy"
                        }

                        continue{
                        }

                        recalculateTree{
                        }
                      }
                    }

                    sequencer{

                      checkTarget{
                        targetUnitParam:t="shootEnemy"
                      }

                      setIntVar{
                        to:t="shootEnemy"
                        value:i=0
                      }

                      chooseBestWeapon{
                        targetParam:t="shootEnemy"
                      }

                      isVarsIntEqual{
                        lhs:t="assumeDanger"
                        rhs_value:i=0
                      }

                      recalculateTree{
                      }
                    }
                  }
                }

                sequencer{

                  not{

                    isVarsRealLess{
                      lhs:t="outDanger"
                      rhs_value:r=1.0
                    }
                  }

                  orderedSelector{

                    not{

                      isLeader{
                      }
                    }

                    not{

                      isVarsRealLess{
                        lhs:t="outDanger"
                        rhs_value:r=3.0
                      }
                    }
                  }

                  orderedSelector{

                    not{

                      setPosFromEntity{
                        to:t="potentialEnemyPos"
                        from:t="shootEnemy"
                      }
                    }

                    not{

                      checkDistance{
                        posParam:t="potentialEnemyPos"
                        radius:r=10.0
                      }
                    }
                  }

                  getFollowPosition{
                    posParam:t="followPos"
                  }

                  checkDistance{
                    posParam:t="followPos"
                    radius:r=20.0
                    yRadius:r=2.5
                  }

                  findCover{
                    radius:r=8.0
                    dangerRadius:r=0.0
                    dangerMinNoiseLevel:r=3.0
                    coverPosParam:t="wishPosition"
                    targetUnitParam:t="shootEnemy"
                  }

                  recalculateTree{
                  }
                }

                not{

                  chooseMaxStance{
                  }
                }

                not{

                  deactivateWeapMod{
                  }
                }

                not{

                  getRegroupPos{
                    posParam:t="regroupPosition"
                  }
                }

                findObstaclesAlongsidePath{
                }
              }
            }

            sequencer{
              name:t="trace_and_shoot"

              reaction{
                event:t="onTraceableDanger"

                selectNode{
                  name:t="one_shoot_attack"
                }
              }

              reaction{
                event:t="onBulletNearby"

                selectNode{
                  name:t="one_shoot_attack"
                }
              }

              reaction{
                event:t="onEnemyPlayerNear"

                sequencer{

                  findDanger{
                    paramName:t="shootEnemy"
                    radiusParamName:t="enemyNearRadius"
                    minDanger:r=0.1
                    tag:t="human"
                  }

                  selectNode{
                    name:t="one_shoot_attack"
                  }
                }
              }

              reaction{
                event:t="regularCheck"

                orderedSelector{
                  selectStrategy:t="ordered"
                  selectOnSuccess:b=yes

                  sequencer{

                    checkVehicleSeats{
                    }

                    break{
                    }
                  }

                  sequencer{
                    name:t="in_vehicle_rc"

                    isInVehicle{
                    }

                    recalculateTree{
                    }
                  }

                  sequencer{
                    name:t="downed_rc"

                    isDowned{
                    }

                    recalculateTree{
                    }
                  }

                  sequencer{
                    name:t="burning_rc"

                    isBurning{
                    }

                    recalculateTree{
                    }
                  }

                  sequencer{
                    name:t="leader_rc"

                    leaderBehaviour{
                      posParam:t="regroupPosition"
                    }

                    break{
                    }
                  }

                  sequencer{
                    name:t="artilery_rc"

                    findActiveArtilleryStrike{
                    }

                    recalculateTree{
                    }
                  }

                  sequencer{
                    name:t="dmg_zone_rc"

                    findActiveDamageZone{
                    }

                    recalculateTree{
                    }
                  }

                  sequencer{
                    name:t="grenade_rc"

                    findDangerGrenade{
                      grenTargetParam:t="dangerLookAt"
                      radius:r=20.0
                    }

                    recalculateTree{
                    }
                  }

                  sequencer{
                    name:t="breath_rc"

                    isUnderwater{
                    }

                    not{

                      hasBreath{
                        ratio:r=0.7
                      }
                    }

                    recalculateTree{
                    }
                  }

                  sequencer{
                    name:t="ammo_req_rc"

                    not{

                      isVarsIntEqual{
                        lhs:t="execTarget"
                        rhs:t="ammoRequester"
                      }
                    }

                    checkTarget{
                      targetUnitParam:t="ammoRequester"
                    }

                    recalculateTree{
                    }
                  }

                  sequencer{
                    name:t="heal_req_rc"

                    not{

                      isVarsIntEqual{
                        lhs:t="execTarget"
                        rhs:t="healRequester"
                      }
                    }

                    checkTarget{
                      targetUnitParam:t="healRequester"
                    }

                    recalculateTree{
                    }
                  }

                  sequencer{
                    name:t="build_req_rc"

                    not{

                      isVarsIntEqual{
                        lhs:t="execTarget"
                        rhs:t="buildTarget"
                      }
                    }

                    checkTarget{
                      targetUnitParam:t="buildTarget"
                    }

                    recalculateTree{
                    }
                  }

                  sequencer{
                    name:t="artillery_req_rc"

                    not{

                      isVarsIntEqual{
                        lhs:t="execTarget"
                        rhs:t="artilleryRequester"
                      }
                    }

                    checkTarget{
                      targetUnitParam:t="artilleryRequester"
                    }

                    recalculateTree{
                    }
                  }

                  sequencer{
                    name:t="attack_req_rc"

                    not{

                      isVarsIntEqual{
                        lhs:t="execTarget"
                        rhs:t="attackTarget"
                      }
                    }

                    checkTarget{
                      targetUnitParam:t="attackTarget"
                    }

                    recalculateTree{
                    }
                  }

                  sequencer{
                    name:t="vehicle_rc"

                    findVehicle{
                      posParam:t="wishPosition"
                    }

                    selectNode{
                      name:t="useVehicle"
                    }
                  }

                  sequencer{
                    name:t="danger_rc"

                    selector{
                      selectStrategy:t="ordered"
                      selectOnSuccess:b=yes

                      sequencer{

                        findDanger{
                          paramName:t="newEnemy"
                          radiusParamName:t="enemyRadius"
                          minDanger:r=0.1
                          tag:t="human"
                        }

                        copyIntVar{
                          to:t="prevShootEnemy"
                          from:t="shootEnemy"
                        }

                        chooseDanger{
                          lhsParam:t="shootEnemy"
                          rhsParam:t="newEnemy"
                          outParam:t="shootEnemy"
                          diff:r=0.2
                          minDanger:r=0.1
                        }

                        speak{
                          phrase:t="enemyAware"
                          timeMinMax:p2=12.0, 20.0
                        }

                        chooseBestWeapon{
                          targetParam:t="shootEnemy"
                        }

                        ifThenElse{

                          isVarsIntEqual{
                            lhs:t="prevShootEnemy"
                            rhs:t="shootEnemy"
                          }

                          continue{
                          }

                          recalculateTree{
                          }
                        }
                      }

                      sequencer{

                        checkTarget{
                          targetUnitParam:t="shootEnemy"
                        }

                        setIntVar{
                          to:t="shootEnemy"
                          value:i=0
                        }

                        chooseBestWeapon{
                          targetParam:t="shootEnemy"
                        }

                        isVarsIntEqual{
                          lhs:t="assumeDanger"
                          rhs_value:i=0
                        }

                        recalculateTree{
                        }
                      }
                    }
                  }

                  not{

                    chooseMaxStance{
                    }
                  }

                  not{

                    deactivateWeapMod{
                    }
                  }

                  not{

                    getRegroupPos{
                      posParam:t="regroupPosition"
                    }
                  }

                  selectNode{
                    name:t="one_shoot_attack"
                  }
                }
              }

              getOrderPosition{
                posParam:t="regroupPosition"
                orderPosParam:t="wishPosition"
              }

              traceNavmesh{
                posParam:t="wishPosition"
                posDestParam:t="wishPosition"
                traceRange:p2=2.0, 4.0
                angDispersion:r=180.0
              }

              moveToPos{
                posParam:t="wishPosition"
                sprintTimerRange:p2=10.0, 20.0
                minDistToSprint:r=1.5
                targetParam:t="shootEnemy"
                timeToLookAtTarget:r=1.0
                lookVisc:r=0.1
                tryClimbing:b=yes
                distThreshold:r=0.5
                maxStanceParam:t="maxStance"
                avoidAiObstacles:b=no
              }
            }

            selector{
              selectStrategy:t="ordered"

              sequencer{
                name:t="fallback_shoot"

                setPosFromEntity{
                  to:t="enemyPosition"
                  from:t="shootEnemy"
                }

                checkDistance{
                  posParam:t="enemyPosition"
                  radius:r=5.0
                  yRadius:r=1.0
                }

                findFallbackNavmeshPoint{
                  posParam:t="fallbackPosition"
                  dist:r=10.0
                  targetParam:t="shootEnemy"
                }

                moveShoot{
                  posParam:t="fallbackPosition"
                  targetUnitParam:t="shootEnemy"
                  angleThreshold:r=180.0
                  minStance:i=2
                  shootTime:p2=0.2, 1.0
                  cooldownTime:p2=0.1, 0.3
                  distThreshold:r=0.5
                  maxStanceParam:t="maxStance"
                  avoidAiObstacles:b=no
                }
              }

              sequencer{
                name:t="shoot_at_unit"

                getRandomPointNearTarget{
                  targetUnitParam:t="shootEnemy"
                  posParam:t="posNearTarget"
                }

                rotateToPoint{
                  posParam:t="posNearTarget"
                }

                shootAtUnit{
                  targetUnitParam:t="shootEnemy"
                  minStance:i=0
                  tryToSaveCurrentStance:b=no
                  minStanceChance:r=1.5
                  shootTime:p2=0.2, 0.5
                  cooldownTime:p2=0.1, 0.9
                  minAimTime:p2=0.1, 0.4
                  maxStanceParam:t="maxStance"
                }
              }
            }
          }
        }
      }

      continue{
      }
    }

    chooseBestWeapon{
      targetParam:t="shootEnemy"
    }

    setCurrentAiAction{
      state:t="attack"
    }
  }

  sequencer{
    name:t="one_shoot_attack"

    reaction{
      event:t="regularCheck"

      selector{
        selectStrategy:t="ordered"
        selectOnSuccess:b=yes

        sequencer{

          checkVehicleSeats{
          }

          break{
          }
        }

        sequencer{
          name:t="in_vehicle_rc"

          isInVehicle{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="downed_rc"

          isDowned{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="burning_rc"

          isBurning{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="leader_rc"

          leaderBehaviour{
            posParam:t="regroupPosition"
          }

          break{
          }
        }

        sequencer{
          name:t="artilery_rc"

          findActiveArtilleryStrike{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="dmg_zone_rc"

          findActiveDamageZone{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="grenade_rc"

          findDangerGrenade{
            grenTargetParam:t="dangerLookAt"
            radius:r=20.0
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="breath_rc"

          isUnderwater{
          }

          not{

            hasBreath{
              ratio:r=0.7
            }
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="ammo_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="ammoRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="ammoRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="heal_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="healRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="healRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="build_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="buildTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="buildTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="artillery_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="artilleryRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="artilleryRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="attack_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="attackTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="attackTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="vehicle_rc"

          findVehicle{
            posParam:t="wishPosition"
          }

          selectNode{
            name:t="useVehicle"
          }
        }

        sequencer{
          name:t="danger_rc"

          selector{
            selectStrategy:t="ordered"
            selectOnSuccess:b=yes

            sequencer{

              findDanger{
                paramName:t="newEnemy"
                radiusParamName:t="enemyRadius"
                minDanger:r=0.1
                tag:t="human"
              }

              copyIntVar{
                to:t="prevShootEnemy"
                from:t="shootEnemy"
              }

              chooseDanger{
                lhsParam:t="shootEnemy"
                rhsParam:t="newEnemy"
                outParam:t="shootEnemy"
                diff:r=0.2
                minDanger:r=0.1
              }

              speak{
                phrase:t="enemyAware"
                timeMinMax:p2=12.0, 20.0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              ifThenElse{

                isVarsIntEqual{
                  lhs:t="prevShootEnemy"
                  rhs:t="shootEnemy"
                }

                continue{
                }

                recalculateTree{
                }
              }
            }

            sequencer{

              checkTarget{
                targetUnitParam:t="shootEnemy"
              }

              setIntVar{
                to:t="shootEnemy"
                value:i=0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              isVarsIntEqual{
                lhs:t="assumeDanger"
                rhs_value:i=0
              }

              recalculateTree{
              }
            }
          }
        }

        sequencer{

          isInSquadLeaderAim{
          }

          resetCover{
          }

          recalculateTree{
          }
        }

        not{

          chooseMaxStance{
          }
        }

        not{

          deactivateWeapMod{
          }
        }

        not{

          getRegroupPos{
            posParam:t="regroupPosition"
          }
        }
      }
    }

    reaction{
      event:t="onEnemyPlayerNear"

      sequencer{

        findDanger{
          paramName:t="shootEnemy"
          radiusParamName:t="enemyNearRadius"
          minDanger:r=0.1
          tag:t="human"
        }

        copyIntVar{
          to:t="prevShootEnemy"
          from:t="shootEnemy"
        }

        orderedSelector{

          isVarsIntEqual{
            lhs:t="prevShootEnemy"
            rhs:t="shootEnemy"
          }

          recalculateTree{
          }
        }
      }
    }

    checkTarget{
      targetUnitParam:t="shootEnemy"
    }

    orderedSelector{

      isAgressiveBehaviour{
      }

      sequencer{

        wasAttackedRecently{
          targetUnitParam:t="shootEnemy"
        }

        orderedSelector{

          isLeader{
          }

          checkDistanceToLeader{
            maxDist:r=24.0
          }
        }
      }
    }

    chooseBestWeapon{
      targetParam:t="shootEnemy"
    }

    setCurrentAiAction{
      state:t="attack"
    }

    repeatUntilFail{
      count:i=2

      not{

        sequencer{

          getRandomPointNearTarget{
            targetUnitParam:t="shootEnemy"
            posParam:t="posNearTarget"
          }

          rotateToPoint{
            posParam:t="posNearTarget"
          }

          shootAtUnit{
            targetUnitParam:t="shootEnemy"
            minStance:i=0
            shootCycles:i=1
            tryToSaveCurrentStance:b=no
            minStanceChance:r=1.5
            shootTime:p2=0.2, 0.9
            cooldownTime:p2=0.1, 0.3
            minAimTime:p2=0.1, 0.4
            maxStanceParam:t="maxStance"
          }
        }
      }

      sequencer{

        checkTarget{
          targetUnitParam:t="shootEnemy"
        }

        setPosFromEntity{
          to:t="enemyPosition"
          from:t="shootEnemy"
        }

        orderedSelector{

          sequencer{

            checkDistance{
              posParam:t="enemyPosition"
              radius:r=7.0
              yRadius:r=5.0
            }

            wait{
              range:p2=0.9, 1.2
              resetable:b=yes
            }
          }

          sequencer{

            checkDistance{
              posParam:t="enemyPosition"
              radius:r=15.0
              yRadius:r=7.0
            }

            wait{
              range:p2=0.6, 0.9
              resetable:b=yes
            }
          }

          sequencer{

            checkDistance{
              posParam:t="enemyPosition"
              radius:r=25.0
              yRadius:r=10.0
            }

            wait{
              range:p2=0.3, 0.6
              resetable:b=yes
            }
          }
        }
      }
    }
  }

  sequencer{
    name:t="follow_position"

    reaction{
      event:t="onBulletNearby"

      recalculateTree{
      }
    }

    reaction{
      event:t="onTraceableDanger"

      sequencer{

        findDanger{
          paramName:t="shootEnemy"
          radiusParamName:t="enemyRadius"
          minDanger:r=3.0
          tag:t="human"
        }

        recalculateTree{
        }
      }
    }

    reaction{
      event:t="onEnemyPlayerNear"

      sequencer{

        isAgressiveBehaviour{
        }

        findDanger{
          paramName:t="shootEnemy"
          radiusParamName:t="enemyNearRadius"
          minDanger:r=0.1
          tag:t="human"
        }

        selectNode{
          name:t="one_shoot_attack"
        }
      }
    }

    reaction{
      event:t="regularCheck"

      selector{
        selectStrategy:t="ordered"
        selectOnSuccess:b=yes

        sequencer{

          checkVehicleSeats{
          }

          break{
          }
        }

        sequencer{
          name:t="in_vehicle_rc"

          isInVehicle{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="downed_rc"

          isDowned{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="burning_rc"

          isBurning{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="leader_rc"

          leaderBehaviour{
            posParam:t="regroupPosition"
          }

          break{
          }
        }

        sequencer{
          name:t="artilery_rc"

          findActiveArtilleryStrike{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="dmg_zone_rc"

          findActiveDamageZone{
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="grenade_rc"

          findDangerGrenade{
            grenTargetParam:t="dangerLookAt"
            radius:r=20.0
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="breath_rc"

          isUnderwater{
          }

          not{

            hasBreath{
              ratio:r=0.7
            }
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="ammo_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="ammoRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="ammoRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="heal_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="healRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="healRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="build_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="buildTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="buildTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="artillery_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="artilleryRequester"
            }
          }

          checkTarget{
            targetUnitParam:t="artilleryRequester"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="attack_req_rc"

          not{

            isVarsIntEqual{
              lhs:t="execTarget"
              rhs:t="attackTarget"
            }
          }

          checkTarget{
            targetUnitParam:t="attackTarget"
          }

          recalculateTree{
          }
        }

        sequencer{
          name:t="vehicle_rc"

          findVehicle{
            posParam:t="wishPosition"
          }

          selectNode{
            name:t="useVehicle"
          }
        }

        sequencer{
          name:t="danger_rc"

          selector{
            selectStrategy:t="ordered"
            selectOnSuccess:b=yes

            sequencer{

              findDanger{
                paramName:t="newEnemy"
                radiusParamName:t="enemyRadius"
                minDanger:r=0.1
                tag:t="human"
              }

              copyIntVar{
                to:t="prevShootEnemy"
                from:t="shootEnemy"
              }

              chooseDanger{
                lhsParam:t="shootEnemy"
                rhsParam:t="newEnemy"
                outParam:t="shootEnemy"
                diff:r=0.2
                minDanger:r=0.1
              }

              speak{
                phrase:t="enemyAware"
                timeMinMax:p2=12.0, 20.0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              ifThenElse{

                isVarsIntEqual{
                  lhs:t="prevShootEnemy"
                  rhs:t="shootEnemy"
                }

                continue{
                }

                recalculateTree{
                }
              }
            }

            sequencer{

              checkTarget{
                targetUnitParam:t="shootEnemy"
              }

              setIntVar{
                to:t="shootEnemy"
                value:i=0
              }

              chooseBestWeapon{
                targetParam:t="shootEnemy"
              }

              isVarsIntEqual{
                lhs:t="assumeDanger"
                rhs_value:i=0
              }

              recalculateTree{
              }
            }
          }
        }

        sequencer{

          orderedSelector{

            sequencer{

              orderedSelector{

                isLeader{
                }

                isLeaderOnTrain{
                }
              }

              resetNavPoints{
              }

              isInTrainZone{
              }

              findTrainEnterPoint{
                posParam:t="enterPosition"
              }

              findTrainNavPoint{
                posParam:t="navPosition"
              }

              recalculateTree{
              }
            }

            success{
            }
          }

          orderedSelector{

            findObstaclesAlongsidePath{
            }

            findDangerAttractionPos{
              posParam:t="enemyPos"
              validPosParamName:t="enemyPosValid"
              radius:r=0.0
              minNoiseLevel:r=3.0
            }

            success{
            }
          }

          sequencer{
            name:t="regroup"

            orderedSelector{

              sequencer{

                not{

                  isPersonalOrder{
                  }
                }

                getCoverPosition{
                  coverPosParam:t="coverPos"
                }

                checkDistance{
                  posParam:t="regroupPosition"
                  otherPosParam:t="coverPos"
                  radiusParam:t="regroupDistance"
                  yRadius:r=2.5
                }

                orderedSelector{

                  checkCover{
                    dangerRadius:r=0.0
                    dangerMinNoiseLevel:r=3.0
                  }

                  findCover{
                    centerParam:t="regroupPosition"
                    centerRadiusParam:t="regroupDistance"
                    radius:r=8.0
                    dangerRadius:r=0.0
                    dangerMinNoiseLevel:r=3.0
                    coverPosParam:t="wishPosition"
                  }

                  continue{
                  }
                }
              }

              sequencer{

                resetCover{
                }

                not{

                  checkDistance{
                    posParam:t="regroupPosition"
                    otherPosParam:t="storedRegroupPosition"
                    radius:r=2.0
                    yRadius:r=2.5
                  }
                }

                copyPoint3Var{
                  from:t="regroupPosition"
                  to:t="storedRegroupPosition"
                }

                getOrderPosition{
                  posParam:t="regroupPosition"
                  orderPosParam:t="wishPosition"
                }
              }
            }

            break{
            }
          }
        }

        not{

          chooseMaxStance{
          }
        }

        not{

          deactivateWeapMod{
          }
        }

        not{

          getRegroupPos{
            posParam:t="regroupPosition"
          }
        }
      }
    }

    setCurrentAiAction{
      state:t="move"
    }

    orderedSelector{

      sequencer{

        not{

          isPersonalOrder{
          }
        }

        orderedSelector{

          sequencer{

            getCoverPosition{
              coverPosParam:t="coverPos"
            }

            checkDistance{
              posParam:t="regroupPosition"
              otherPosParam:t="coverPos"
              radiusParam:t="regroupDistance"
              yRadius:r=2.5
            }

            checkCover{
              coverPosParam:t="wishPosition"
              dangerRadius:r=0.0
              dangerMinNoiseLevel:r=3.0
            }
          }

          findCover{
            centerParam:t="regroupPosition"
            centerRadiusParam:t="regroupDistance"
            radius:r=8.0
            dangerRadius:r=0.0
            dangerMinNoiseLevel:r=3.0
            coverPosParam:t="wishPosition"
          }
        }

        orderedSelector{

          moveToPos{
            posParam:t="wishPosition"
            sprintTimerRange:p2=10.0, 20.0
            minDistToSprint:r=1.5
            targetParam:t="shootEnemy"
            timeToLookAtTarget:r=4.0
            lookVisc:r=0.1
            tryClimbing:b=yes
            dangerPosParam:t="enemyPos"
            dangerValidParam:t="enemyPosValid"
            dangerLookRange:p2=1.5, 2.5
            maxStanceParam:t="maxStance"
            distThreshold:r=0.5
            timeToStuck:r=2.0
            stuckDirParam:t="stuckDir"
            avoidAiObstacles:b=no
          }

          moveToPos{
            posParam:t="wishPosition"
            sprintTimerRange:p2=10.0, 20.0
            minDistToSprint:r=1.5
            targetParam:t="shootEnemy"
            timeToLookAtTarget:r=4.0
            lookVisc:r=0.1
            tryClimbing:b=yes
            dangerPosParam:t="enemyPos"
            dangerValidParam:t="enemyPosValid"
            dangerLookRange:p2=1.5, 2.5
            maxStanceParam:t="maxStance"
            stuckDirParam:t="stuckDir"
            timeToStuck:r=1.5
            incObstacles:b=no
            avoidAiObstacles:b=no
          }

          exitHandler{

            repeatUntilFail{

              getPointAroundAIPos{
                dirParam:t="stuckDir"
                outPosParam:t="outStuckPos"
                resetAIPointsGeneratorParam:t="resetAIPointsGenerator"
              }

              not{

                sequencer{

                  moveToPos{
                    posParam:t="outStuckPos"
                    sprintTimerRange:p2=10.0, 20.0
                    minDistToSprint:r=1.5
                    targetParam:t="shootEnemy"
                    timeToLookAtTarget:r=4.0
                    lookVisc:r=0.1
                    tryClimbing:b=yes
                    dangerPosParam:t="enemyPos"
                    dangerValidParam:t="enemyPosValid"
                    dangerLookRange:p2=1.5, 2.5
                    maxStanceParam:t="maxStance"
                    distThreshold:r=0.5
                    avoidAiObstacles:b=no
                  }

                  moveToPos{
                    posParam:t="wishPosition"
                    sprintTimerRange:p2=10.0, 20.0
                    minDistToSprint:r=1.5
                    targetParam:t="shootEnemy"
                    timeToLookAtTarget:r=4.0
                    lookVisc:r=0.1
                    tryClimbing:b=yes
                    dangerPosParam:t="enemyPos"
                    dangerValidParam:t="enemyPosValid"
                    dangerLookRange:p2=1.5, 2.5
                    maxStanceParam:t="maxStance"
                    distThreshold:r=0.5
                    timeToStuck:r=1.5
                    avoidAiObstacles:b=no
                  }
                }
              }
            }

            setIntVar{
              to:t="resetAIPointsGenerator"
              value:i=1
            }
          }
        }
      }

      sequencer{

        resetCover{
        }

        getOrderPosition{
          posParam:t="regroupPosition"
          orderPosParam:t="wishPosition"
        }

        orderedSelector{

          moveToPos{
            posParam:t="wishPosition"
            sprintTimerRange:p2=10.0, 20.0
            minDistToSprint:r=1.5
            targetParam:t="shootEnemy"
            timeToLookAtTarget:r=4.0
            lookVisc:r=0.1
            tryClimbing:b=yes
            dangerPosParam:t="enemyPos"
            dangerValidParam:t="enemyPosValid"
            dangerLookRange:p2=1.5, 2.5
            maxStanceParam:t="maxStance"
            stuckDirParam:t="stuckDir"
            timeToStuck:r=2.0
            avoidAiObstacles:b=no
          }

          moveToPos{
            posParam:t="wishPosition"
            sprintTimerRange:p2=10.0, 20.0
            minDistToSprint:r=1.5
            targetParam:t="shootEnemy"
            timeToLookAtTarget:r=4.0
            lookVisc:r=0.1
            tryClimbing:b=yes
            dangerPosParam:t="enemyPos"
            dangerValidParam:t="enemyPosValid"
            dangerLookRange:p2=1.5, 2.5
            maxStanceParam:t="maxStance"
            stuckDirParam:t="stuckDir"
            timeToStuck:r=1.5
            incObstacles:b=no
            avoidAiObstacles:b=no
          }

          exitHandler{

            repeatUntilFail{

              getPointAroundAIPos{
                dirParam:t="stuckDir"
                outPosParam:t="outStuckPos"
                resetAIPointsGeneratorParam:t="resetAIPointsGenerator"
              }

              not{

                sequencer{

                  moveToPos{
                    posParam:t="outStuckPos"
                    sprintTimerRange:p2=10.0, 20.0
                    minDistToSprint:r=1.5
                    targetParam:t="shootEnemy"
                    timeToLookAtTarget:r=4.0
                    lookVisc:r=0.1
                    tryClimbing:b=yes
                    dangerPosParam:t="enemyPos"
                    dangerValidParam:t="enemyPosValid"
                    dangerLookRange:p2=1.5, 2.5
                    maxStanceParam:t="maxStance"
                    distThreshold:r=0.5
                    avoidAiObstacles:b=no
                  }

                  moveToPos{
                    posParam:t="wishPosition"
                    sprintTimerRange:p2=10.0, 20.0
                    minDistToSprint:r=1.5
                    targetParam:t="shootEnemy"
                    timeToLookAtTarget:r=4.0
                    lookVisc:r=0.1
                    tryClimbing:b=yes
                    dangerPosParam:t="enemyPos"
                    dangerValidParam:t="enemyPosValid"
                    dangerLookRange:p2=1.5, 2.5
                    maxStanceParam:t="maxStance"
                    distThreshold:r=0.5
                    timeToStuck:r=1.5
                    avoidAiObstacles:b=no
                  }
                }
              }
            }

            setIntVar{
              to:t="resetAIPointsGenerator"
              value:i=1
            }
          }
        }
      }
    }

    orderedSelector{

      sequencer{
        name:t="stand_in_cover"

        setCurrentAiAction{
          state:t="stand"
        }

        setCurrentAiAction{
          state:t="in_cover"
        }

        isInCover{
        }

        reaction{
          event:t="regularCheck"

          selector{
            selectStrategy:t="ordered"
            selectOnSuccess:b=yes

            sequencer{

              checkVehicleSeats{
              }

              break{
              }
            }

            sequencer{
              name:t="in_vehicle_rc"

              isInVehicle{
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="downed_rc"

              isDowned{
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="burning_rc"

              isBurning{
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="leader_rc"

              leaderBehaviour{
                posParam:t="regroupPosition"
              }

              break{
              }
            }

            sequencer{
              name:t="artilery_rc"

              findActiveArtilleryStrike{
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="dmg_zone_rc"

              findActiveDamageZone{
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="grenade_rc"

              findDangerGrenade{
                grenTargetParam:t="dangerLookAt"
                radius:r=20.0
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="breath_rc"

              isUnderwater{
              }

              not{

                hasBreath{
                  ratio:r=0.7
                }
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="ammo_req_rc"

              not{

                isVarsIntEqual{
                  lhs:t="execTarget"
                  rhs:t="ammoRequester"
                }
              }

              checkTarget{
                targetUnitParam:t="ammoRequester"
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="heal_req_rc"

              not{

                isVarsIntEqual{
                  lhs:t="execTarget"
                  rhs:t="healRequester"
                }
              }

              checkTarget{
                targetUnitParam:t="healRequester"
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="build_req_rc"

              not{

                isVarsIntEqual{
                  lhs:t="execTarget"
                  rhs:t="buildTarget"
                }
              }

              checkTarget{
                targetUnitParam:t="buildTarget"
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="artillery_req_rc"

              not{

                isVarsIntEqual{
                  lhs:t="execTarget"
                  rhs:t="artilleryRequester"
                }
              }

              checkTarget{
                targetUnitParam:t="artilleryRequester"
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="attack_req_rc"

              not{

                isVarsIntEqual{
                  lhs:t="execTarget"
                  rhs:t="attackTarget"
                }
              }

              checkTarget{
                targetUnitParam:t="attackTarget"
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="vehicle_rc"

              findVehicle{
                posParam:t="wishPosition"
              }

              selectNode{
                name:t="useVehicle"
              }
            }

            sequencer{
              name:t="danger_rc"

              selector{
                selectStrategy:t="ordered"
                selectOnSuccess:b=yes

                sequencer{

                  findDanger{
                    paramName:t="newEnemy"
                    radiusParamName:t="enemyRadius"
                    minDanger:r=0.1
                    tag:t="human"
                  }

                  copyIntVar{
                    to:t="prevShootEnemy"
                    from:t="shootEnemy"
                  }

                  chooseDanger{
                    lhsParam:t="shootEnemy"
                    rhsParam:t="newEnemy"
                    outParam:t="shootEnemy"
                    diff:r=0.2
                    minDanger:r=0.1
                  }

                  speak{
                    phrase:t="enemyAware"
                    timeMinMax:p2=12.0, 20.0
                  }

                  chooseBestWeapon{
                    targetParam:t="shootEnemy"
                  }

                  ifThenElse{

                    isVarsIntEqual{
                      lhs:t="prevShootEnemy"
                      rhs:t="shootEnemy"
                    }

                    continue{
                    }

                    recalculateTree{
                    }
                  }
                }

                sequencer{

                  checkTarget{
                    targetUnitParam:t="shootEnemy"
                  }

                  setIntVar{
                    to:t="shootEnemy"
                    value:i=0
                  }

                  chooseBestWeapon{
                    targetParam:t="shootEnemy"
                  }

                  isVarsIntEqual{
                    lhs:t="assumeDanger"
                    rhs_value:i=0
                  }

                  recalculateTree{
                  }
                }
              }
            }

            sequencer{
              name:t="regroup"

              getCoverPosition{
                coverPosParam:t="coverPos"
              }

              orderedSelector{

                not{

                  checkDistance{
                    posParam:t="regroupPosition"
                    otherPosParam:t="coverPos"
                    radiusParam:t="regroupDistance"
                    yRadius:r=2.5
                  }
                }

                not{

                  checkCover{
                    needCover:b=no
                    dangerRadius:r=0.0
                    dangerMinNoiseLevel:r=3.0
                  }
                }

                sequencer{

                  isInSquadLeaderAim{
                  }

                  not{

                    sequencer{

                      not{

                        isSquadLeaderCrawl{
                        }
                      }

                      chooseMaxStance{
                      }

                      changeStance{
                        stanceName:t="stand"
                        maxStanceParam:t="maxStance"
                      }
                    }
                  }

                  changeStance{
                    stanceName:t="stand"
                  }
                }
              }

              resetCover{
              }

              recalculateTree{
              }
            }

            not{

              chooseMaxStance{
              }
            }

            not{

              deactivateWeapMod{
              }
            }

            not{

              getRegroupPos{
                posParam:t="regroupPosition"
              }
            }

            orderedSelector{

              sequencer{

                orderedSelector{

                  isLeader{
                  }

                  isLeaderOnTrain{
                  }
                }

                resetNavPoints{
                }

                isInTrainZone{
                }

                findTrainEnterPoint{
                  posParam:t="enterPosition"
                }

                findTrainNavPoint{
                  posParam:t="navPosition"
                }

                recalculateTree{
                }
              }

              success{
              }
            }
          }
        }

        getCoverPosition{
          coverPosParam:t="coverPos"
        }

        selectStanceInCover{
          maxStanceParam:t="maxStance"
          stanceParam:t="coverStance"
          safe:b=yes
        }

        strafeMove{
          posParam:t="coverPos"
          stanceParam:t="coverStance"
          aim:b=no
        }

        orderedSelector{

          findPotentialEnemyPos{
            posParam:t="potentialEnemyPos"
            minNoiseLevel:r=3.0
          }

          findDangerAttractionPos{
            posParam:t="potentialEnemyPos"
            radius:r=0.0
            minNoiseLevel:r=3.0
          }
        }

        orderedSelector{

          sequencer{
            name:t="peek"

            ignoreChance{
              chance:r=0.35
            }

            getCoverShootPosition{
              coverPosParam:t="coverPos"
            }

            chooseMaxStance{
            }

            selectStanceInCover{
              maxStanceParam:t="maxStance"
              stanceParam:t="coverStance"
              safe:b=no
            }

            changeStance{
              stanceName:t="stand"
              maxStanceParam:t="coverStance"
            }

            orderedSelector{

              strafeMove{
                posParam:t="coverPos"
                stanceParam:t="coverStance"
                aim:b=no
                straightMove:b=yes
              }

              continue{
              }
            }

            parallel{

              wait{
                range:p2=2.0, 5.0
                resetable:b=yes
              }

              wanderLook{
                posParam:t="potentialEnemyPos"
                range:p2=0.2, 0.1
                maxStanceParam:t="coverStance"
              }
            }
          }

          orderedSelector{

            sequencer{
              name:t="crawl"

              ignoreChance{
                chance:r=0.5
              }

              changeStance{
                stanceName:t="crawl"
                maxStanceParam:t="coverStance"
              }

              parallel{

                wait{
                  range:p2=1.5, 2.0
                  resetable:b=yes
                }

                wanderLook{
                  posParam:t="potentialEnemyPos"
                  range:p2=0.2, 0.1
                  maxStanceParam:t="coverStance"
                }
              }
            }
          }

          continue{
          }
        }

        findPotentialEnemyDirectionEntryPoint{
          posParam:t="potentialEnemyPos"
        }

        parallel{

          wait{
            range:p2=1.5, 3.0
            resetable:b=yes
          }

          wanderLook{
            posParam:t="potentialEnemyPos"
            range:p2=0.2, 0.1
            maxStanceParam:t="coverStance"
          }
        }
      }

      sequencer{
        name:t="stand"

        setCurrentAiAction{
          state:t="stand"
        }

        reaction{
          event:t="regularCheck"

          selector{
            selectStrategy:t="ordered"
            selectOnSuccess:b=yes

            sequencer{

              checkVehicleSeats{
              }

              break{
              }
            }

            sequencer{
              name:t="in_vehicle_rc"

              isInVehicle{
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="downed_rc"

              isDowned{
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="burning_rc"

              isBurning{
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="leader_rc"

              leaderBehaviour{
                posParam:t="regroupPosition"
              }

              break{
              }
            }

            sequencer{
              name:t="artilery_rc"

              findActiveArtilleryStrike{
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="dmg_zone_rc"

              findActiveDamageZone{
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="grenade_rc"

              findDangerGrenade{
                grenTargetParam:t="dangerLookAt"
                radius:r=20.0
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="breath_rc"

              isUnderwater{
              }

              not{

                hasBreath{
                  ratio:r=0.7
                }
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="ammo_req_rc"

              not{

                isVarsIntEqual{
                  lhs:t="execTarget"
                  rhs:t="ammoRequester"
                }
              }

              checkTarget{
                targetUnitParam:t="ammoRequester"
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="heal_req_rc"

              not{

                isVarsIntEqual{
                  lhs:t="execTarget"
                  rhs:t="healRequester"
                }
              }

              checkTarget{
                targetUnitParam:t="healRequester"
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="build_req_rc"

              not{

                isVarsIntEqual{
                  lhs:t="execTarget"
                  rhs:t="buildTarget"
                }
              }

              checkTarget{
                targetUnitParam:t="buildTarget"
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="artillery_req_rc"

              not{

                isVarsIntEqual{
                  lhs:t="execTarget"
                  rhs:t="artilleryRequester"
                }
              }

              checkTarget{
                targetUnitParam:t="artilleryRequester"
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="attack_req_rc"

              not{

                isVarsIntEqual{
                  lhs:t="execTarget"
                  rhs:t="attackTarget"
                }
              }

              checkTarget{
                targetUnitParam:t="attackTarget"
              }

              recalculateTree{
              }
            }

            sequencer{
              name:t="vehicle_rc"

              findVehicle{
                posParam:t="wishPosition"
              }

              selectNode{
                name:t="useVehicle"
              }
            }

            sequencer{
              name:t="danger_rc"

              selector{
                selectStrategy:t="ordered"
                selectOnSuccess:b=yes

                sequencer{

                  findDanger{
                    paramName:t="newEnemy"
                    radiusParamName:t="enemyRadius"
                    minDanger:r=0.1
                    tag:t="human"
                  }

                  copyIntVar{
                    to:t="prevShootEnemy"
                    from:t="shootEnemy"
                  }

                  chooseDanger{
                    lhsParam:t="shootEnemy"
                    rhsParam:t="newEnemy"
                    outParam:t="shootEnemy"
                    diff:r=0.2
                    minDanger:r=0.1
                  }

                  speak{
                    phrase:t="enemyAware"
                    timeMinMax:p2=12.0, 20.0
                  }

                  chooseBestWeapon{
                    targetParam:t="shootEnemy"
                  }

                  ifThenElse{

                    isVarsIntEqual{
                      lhs:t="prevShootEnemy"
                      rhs:t="shootEnemy"
                    }

                    continue{
                    }

                    recalculateTree{
                    }
                  }
                }

                sequencer{

                  checkTarget{
                    targetUnitParam:t="shootEnemy"
                  }

                  setIntVar{
                    to:t="shootEnemy"
                    value:i=0
                  }

                  chooseBestWeapon{
                    targetParam:t="shootEnemy"
                  }

                  isVarsIntEqual{
                    lhs:t="assumeDanger"
                    rhs_value:i=0
                  }

                  recalculateTree{
                  }
                }
              }
            }

            sequencer{
              name:t="regroup"

              getCoverPosition{
                coverPosParam:t="coverPos"
              }

              orderedSelector{

                not{

                  checkDistance{
                    posParam:t="regroupPosition"
                    otherPosParam:t="coverPos"
                    radiusParam:t="regroupDistance"
                    yRadius:r=2.5
                  }
                }

                not{

                  checkCover{
                    needCover:b=no
                    dangerRadius:r=0.0
                    dangerMinNoiseLevel:r=3.0
                  }
                }

                sequencer{

                  isInSquadLeaderAim{
                  }

                  not{

                    sequencer{

                      not{

                        isSquadLeaderCrawl{
                        }
                      }

                      chooseMaxStance{
                      }

                      changeStance{
                        stanceName:t="stand"
                        maxStanceParam:t="maxStance"
                      }
                    }
                  }

                  changeStance{
                    stanceName:t="stand"
                  }
                }
              }

              resetCover{
              }

              recalculateTree{
              }
            }

            not{

              chooseMaxStance{
              }
            }

            not{

              deactivateWeapMod{
              }
            }

            not{

              getRegroupPos{
                posParam:t="regroupPosition"
              }
            }

            orderedSelector{

              sequencer{

                orderedSelector{

                  isLeader{
                  }

                  isLeaderOnTrain{
                  }
                }

                resetNavPoints{
                }

                isInTrainZone{
                }

                findTrainEnterPoint{
                  posParam:t="enterPosition"
                }

                findTrainNavPoint{
                  posParam:t="navPosition"
                }

                recalculateTree{
                }
              }

              success{
              }
            }
          }
        }

        parallel{

          validateStandPosition{
          }

          wanderLook{
            posParam:t="potentialEnemyPos"
            range:p2=0.2, 0.1
            maxStanceParam:t="maxStance"
          }
        }

        parallel{

          wait{
            range:p2=1.5, 3.0
            resetable:b=yes
          }

          wanderLook{
            posParam:t="potentialEnemyPos"
            range:p2=0.2, 0.1
            maxStanceParam:t="maxStance"
          }
        }

        parallel{

          validateStandPosition{
          }

          wanderLook{
            posParam:t="potentialEnemyPos"
            range:p2=0.2, 0.1
            maxStanceParam:t="maxStance"
          }
        }

        parallel{

          wait{
            range:p2=1.5, 2.0
            resetable:b=yes
          }

          wanderLook{
            posParam:t="potentialEnemyPos"
            range:p2=0.2, 0.1
            maxStanceParam:t="maxStance"
          }
        }

        orderedSelector{

          findPotentialEnemyPos{
            posParam:t="potentialEnemyPos"
            minNoiseLevel:r=3.0
          }

          findDangerAttractionPos{
            posParam:t="potentialEnemyPos"
            radius:r=0.0
            minNoiseLevel:r=3.0
          }
        }

        findPotentialEnemyDirectionEntryPoint{
          posParam:t="potentialEnemyPos"
        }

        sequencer{

          ignoreChance{
            chance:r=0.5
          }

          changeStance{
            stanceName:t="crawl"
            maxStanceParam:t="maxStance"
          }
        }
      }
    }
  }

  getRegroupPos{
    posParam:t="regroupPosition"
  }

  getRegroupDistance{
    minDist:r=16.0
    distParam:t="regroupDistance"
  }

  leaderBehaviour{
    posParam:t="regroupPosition"
  }

  chooseMaxStance{
  }

  chooseMaxStance{
  }

  copyPoint3Var{
    from:t="regroupPosition"
    to:t="storedRegroupPosition"
  }
}