sequencer{
  name:t="sub.train"

  reaction{
    event:t="onAgentTrainZoneEnter"

    recalculateTree{
    }
  }

  reaction{
    event:t="onAgentTrainEnter"

    recalculateTree{
    }
  }

  reaction{
    event:t="onAgentTrainLeave"

    sequencer{

      resetNavPoints{
      }

      recalculateTree{
      }
    }
  }

  isInTrainZone{
  }

  orderedSelector{

    sequencer{

      isOnTrain{
      }

      repeat{

        reaction{
          event:t="onEnemyPlayerNear"

          sequencer{

            not{

              isDowned{
              }
            }

            findDanger{
              paramName:t="shootEnemy"
              radiusParamName:t="enemyNearRadius"
              minDanger:r=0.1
              outDangerParam:t="outDanger"
              tag:t="human"
            }

            checkTarget{
              targetUnitParam:t="shootEnemy"
            }

            orderedSelector{

              isVarsIntEqual{
                lhs:t="prevShootEnemy"
                rhs:t="shootEnemy"
              }

              sequencer{

                copyIntVar{
                  to:t="prevShootEnemy"
                  from:t="shootEnemy"
                }

                selectNode{
                  selectName:t="one_shoot_attack_train"
                }
              }
            }
          }
        }

        reaction{
          event:t="regularCheck"

          sequencer{

            not{

              isDowned{
              }
            }

            findDanger{
              paramName:t="shootEnemy"
              radiusParamName:t="enemyRadius"
              minDanger:r=0.1
              outDangerParam:t="outDanger"
              tag:t="human"
            }

            checkTarget{
              targetUnitParam:t="shootEnemy"
            }

            orderedSelector{

              isVarsIntEqual{
                lhs:t="prevShootEnemy"
                rhs:t="shootEnemy"
              }

              sequencer{

                copyIntVar{
                  to:t="prevShootEnemy"
                  from:t="shootEnemy"
                }

                selectNode{
                  selectName:t="one_shoot_attack_train"
                }
              }
            }
          }
        }

        sequencer{

          isDowned{
          }

          setCurrentAiAction{
            state:t="heal"
          }

          useMedkit{
          }
        }

        orderedSelector{

          reaction{
            event:t="onEnemyPlayerNear"

            sequencer{

              findDanger{
                paramName:t="shootEnemy"
                radiusParamName:t="enemyNearRadius"
                minDanger:r=0.1
                outDangerParam:t="outDanger"
                tag:t="human"
              }

              checkTarget{
                targetUnitParam:t="shootEnemy"
              }

              selectNode{
                selectName:t="one_shoot_attack_train"
              }
            }
          }

          reaction{
            event:t="onBulletNearby"

            selectNode{
              selectName:t="one_shoot_attack_train"
            }
          }

          reaction{
            event:t="regularCheck"

            sequencer{

              orderedSelector{

                sequencer{

                  isDowned{
                  }

                  recalculateTree{
                  }
                }

                success{
                }
              }

              orderedSelector{

                isVarsIntEqual{
                  lhs:t="prevShootEnemy"
                  rhs:t="shootEnemy"
                }

                sequencer{

                  copyIntVar{
                    to:t="prevShootEnemy"
                    from:t="shootEnemy"
                  }

                  selectNode{
                    selectName:t="one_shoot_attack_train"
                  }
                }
              }

              not{

                isDowned{
                }
              }

              findDanger{
                paramName:t="shootEnemy"
                radiusParamName:t="enemyRadius"
                minDanger:r=0.1
                outDangerParam:t="outDanger"
                tag:t="human"
              }

              checkTarget{
                targetUnitParam:t="shootEnemy"
              }
            }
          }

          sequencer{

            orderedSelector{

              isLeaderOnTrain{
              }

              not{

                isLeaderAlive{
                }
              }
            }

            orderedSelector{

              isAgentCartEidValid{
              }

              sequencer{

                resetNavPoints{
                }

                findAgentCart{
                }

                findTrainEnterPoint{
                  posParam:t="enterPosition"
                  init:b=no
                }

                orderedSelector{

                  sequencer{

                    isOnTheTrainRoof{
                    }

                    findTrainNavPointOnTheRoof{
                      posParam:t="navPosition"
                    }
                  }

                  findTrainNavPoint{
                    posParam:t="navPosition"
                  }
                }
              }
            }

            orderedSelector{

              sequencer{

                findTrainDangerPoint{
                  posParam:t="dangerPosition"
                }

                updateTrainLocalPoint{
                  localPosParam:t="dangerPosition"
                  worldPosParam:t="potentialEnemyPos"
                }
              }

              findPotentialEnemyPos{
                posParam:t="potentialEnemyPos"
                minNoiseLevel:r=0.1
              }

              findDangerAttractionPos{
                posParam:t="potentialEnemyPos"
                radius:r=0.0
                minNoiseLevel:r=0.1
              }
            }

            ifThenElse{

              isOnTheTrainRoof{
              }

              orderedSelector{

                isNavPointOnTheRoofValid{
                }

                sequencer{

                  resetNavPoints{
                    resetCartEid:b=no
                  }

                  findTrainEnterPoint{
                    posParam:t="enterPosition"
                    init:b=no
                  }

                  findTrainNavPointOnTheRoof{
                    posParam:t="navPosition"
                  }
                }
              }

              orderedSelector{

                isNavPointValid{
                }

                sequencer{

                  resetNavPoints{
                    resetCartEid:b=no
                  }

                  findTrainEnterPoint{
                    posParam:t="enterPosition"
                    init:b=no
                  }

                  findTrainNavPoint{
                    posParam:t="navPosition"
                  }
                }
              }
            }

            changeStance{
              stanceName:t="stand"
            }

            parallel{

              cycle{

                updateTrainLocalPoint{
                  localPosParam:t="navPosition"
                  worldPosParam:t="wishPosition"
                }
              }

              moveByDir{
                endPos:t="wishPosition"
                duration:r=2.0
                distThreshold:r=0.5
              }
            }

            parallel{

              cycle{

                orderedSelector{

                  sequencer{

                    findTrainDangerPoint{
                      posParam:t="dangerPosition"
                    }

                    updateTrainLocalPoint{
                      localPosParam:t="dangerPosition"
                      worldPosParam:t="potentialEnemyPos"
                    }
                  }

                  running{
                  }
                }
              }

              wait{
                range:p2=1.5, 4.0
                resetable:b=yes
              }

              wanderLook{
                posParam:t="potentialEnemyPos"
                range:p2=0.2, 0.1
                maxStanceParam:t="trainStance"
              }
            }

            parallel{

              cycle{

                orderedSelector{

                  sequencer{

                    findTrainDangerPoint{
                      posParam:t="dangerPosition"
                    }

                    updateTrainLocalPoint{
                      localPosParam:t="dangerPosition"
                      worldPosParam:t="potentialEnemyPos"
                    }
                  }

                  running{
                  }
                }
              }

              wait{
                range:p2=1.5, 4.0
                resetable:b=yes
              }

              wanderLook{
                posParam:t="potentialEnemyPos"
                range:p2=0.2, 0.1
                maxStanceParam:t="trainStance"
              }
            }

            chooseRandomStance{
              stanceParam:t="trainStance"
              minStance:i=1
              maxStance:i=1
            }

            chooseRandomStance{
              stanceParam:t="trainStance"
            }
          }

          sequencer{

            orderedSelector{

              isAgentCartEidValid{
              }

              sequencer{

                resetNavPoints{
                }

                findAgentCart{
                }
              }
            }

            orderedSelector{

              isOnTheTrainRoof{
              }

              sequencer{

                findTrainEnterPoint{
                  posParam:t="enterPosition"
                  init:b=no
                  nearestToLeader:b=yes
                }

                changeStance{
                  stanceName:t="stand"
                }

                parallel{

                  cycle{

                    updateTrainLocalPoint{
                      localPosParam:t="enterPosition"
                      worldPosParam:t="wishPosition"
                    }
                  }

                  moveByDir{
                    endPos:t="wishPosition"
                    duration:r=5.0
                    distThreshold:r=0.5
                  }
                }
              }
            }

            findTrainExitPoint{
              posParam:t="exitPosition"
              nearestToLeader:b=yes
            }

            changeStance{
              stanceName:t="stand"
            }

            parallel{

              cycle{

                updateTrainLocalPoint{
                  localPosParam:t="exitPosition"
                  worldPosParam:t="wishPosition"
                }
              }

              moveByDir{
                endPos:t="wishPosition"
                duration:r=5.0
                distThreshold:r=0.5
              }
            }

            resetNavPoints{
            }
          }
        }

        repeatUntilFail{
          name:t="one_shoot_attack_train"
          count:i=2

          sequencer{

            not{

              isDowned{
              }
            }

            findDanger{
              paramName:t="shootEnemy"
              radiusParamName:t="enemyRadius"
              minDanger:r=0.1
              outDangerParam:t="outDanger"
              tag:t="human"
            }

            checkTarget{
              targetUnitParam:t="shootEnemy"
            }

            chooseBestWeapon{
              targetParam:t="shootEnemy"
            }

            setCurrentAiAction{
              state:t="attack"
            }

            getRandomPointNearTarget{
              targetUnitParam:t="shootEnemy"
              posParam:t="posNearTarget"
            }

            rotateToPoint{
              posParam:t="posNearTarget"
            }

            shootAtUnit{
              targetUnitParam:t="shootEnemy"
              minStance:i=1
              shootCycles:i=2
              tryToSaveCurrentStance:b=no
              minStanceChance:r=1.5
              shootTime:p2=0.2, 0.9
              cooldownTime:p2=0.1, 0.3
              minAimTime:p2=0.1, 0.4
              maxStanceParam:t="maxStance"
            }
          }
        }
      }
    }

    sequencer{

      not{

        isDowned{
        }
      }

      resetNavPoints{
      }

      orderedSelector{

        isLeader{
        }

        isLeaderOnTrain{
        }
      }

      findTrainEnterPoint{
        posParam:t="enterPosition"
        maxDist:r=36.0
      }

      findTrainNavPoint{
        posParam:t="navPosition"
        maxDist:r=36.0
      }

      parallel{

        cycle{

          updateTrainLocalPoint{
            localPosParam:t="enterPosition"
            worldPosParam:t="wishPosition"
          }
        }

        orderedSelector{

          sequencer{

            checkDistance{
              posParam:t="wishPosition"
              radius:r=4.0
              yRadius:r=4.5
            }

            changeStance{
              stanceName:t="stand"
            }

            parallel{

              moveByDir{
                endPos:t="wishPosition"
                duration:r=2.0
                distThresholsd:r=0.5
              }

              walkerClimb{
                duration:r=2.0
              }
            }
          }

          sequencer{

            moveToPos{
              posParam:t="wishPosition"
              sprintTimerRange:p2=10.0, 20.0
              minDistToSprint:r=0.5
              tryClimbing:b=yes
              distThreshold:r=1.0
              avoidAiObstacles:b=no
              minStance:i=2
            }

            checkDistance{
              posParam:t="wishPosition"
              radius:r=4.0
              yRadius:r=4.5
            }
          }
        }
      }
    }
  }
}