repeat{
  name:t="sub.aggressiveMoveReactionDefault"
  count:i=1

  subTree{
    name:t=""
    treeName:t="sub.chooseMaxStance"
  }

  subTree{
    name:t=""
    treeName:t="sub.deactivateWeapMod"
  }

  subTree{
    name:t=""
    treeName:t="sub.checkDowned"
  }

  subTree{
    name:t=""
    treeName:t="sub.checkBurning"
  }

  subTree{
    name:t=""
    treeName:t="sub.swimUpCheck"
  }

  subTree{
    name:t=""
    treeName:t="sub.tryToOpenDoors"
  }

  subTree{
    name:t=""
    treeName:t="sub.findDangerGrenade"
  }

  subTree{
    name:t=""
    treeName:t="sub.findDangerZone"
  }

  subTree{
    name:t=""
    treeName:t="sub.moveFindDangerCheck"
  }

  subTree{
    name:t=""
    treeName:t="sub.aggressiveCheckBuildAndHeal"
  }

  sequencer{
    name:t="regroup"

    orderedSelector{

      orderedSelector{

        subTree{
          name:t=""
          refId:t="checkCoverRef"
        }

        subTree{
          name:t=""
          refId:t="findCoverRef"
        }
      }

      subTree{
        name:t=""
        treeName:t="sub.regroupCheck"
      }
    }
  }
}

repeat{
  name:t="sub.aggressiveMoveReactionTrain"
  count:i=1

  getPointInTrainCapzone{
    posParam:t="regroupPosition"
  }

  subTree{
    name:t=""
    treeName:t="sub.chooseMaxStance"
  }

  subTree{
    name:t=""
    treeName:t="sub.deactivateWeapMod"
  }

  subTree{
    name:t=""
    treeName:t="sub.checkDowned"
  }

  subTree{
    name:t=""
    treeName:t="sub.checkBurning"
  }

  subTree{
    name:t=""
    treeName:t="sub.swimUpCheck"
  }

  subTree{
    name:t=""
    treeName:t="sub.tryToOpenDoors"
  }

  subTree{
    name:t=""
    treeName:t="sub.findDangerGrenade"
  }

  subTree{
    name:t=""
    treeName:t="sub.findDangerZone"
  }

  subTree{
    name:t=""
    treeName:t="sub.moveFindDangerCheck"
  }

  sequencer{
    name:t="regroup"

    orderedSelector{

      orderedSelector{

        subTree{
          name:t=""
          refId:t="checkCoverRef"
        }

        subTree{
          name:t=""
          refId:t="findCoverRef"
        }
      }

      subTree{
        name:t=""
        treeName:t="sub.regroupCheck"
      }
    }
  }
}

repeat{
  count:i=1
  name:t="sub.aggressiveStayReactionDefault"

  subTree{
    name:t=""
    treeName:t="sub.chooseMaxStance"
  }

  subTree{
    name:t=""
    treeName:t="sub.deactivateWeapMod"
  }

  subTree{
    name:t=""
    treeName:t="sub.checkDowned"
  }

  subTree{
    name:t=""
    treeName:t="sub.checkBurning"
  }

  subTree{
    name:t=""
    treeName:t="sub.swimUpCheck"
  }

  subTree{
    name:t=""
    treeName:t="sub.tryToOpenDoors"
  }

  subTree{
    name:t=""
    treeName:t="sub.findDangerGrenade"
  }

  subTree{
    name:t=""
    treeName:t="sub.findDangerZone"
  }

  subTree{
    name:t=""
    treeName:t="sub.stayFindDangerCheck"
  }

  subTree{
    name:t=""
    treeName:t="sub.changeStanceWhenInTheSquadLeaderAim"
  }

  subTree{
    name:t=""
    treeName:t="sub.aggressiveCheckBuildAndHeal"
  }

  sequencer{
    name:t="regroup"

    orderedSelector{

      orderedSelector{

        subTree{
          name:t=""
          refId:t="checkCoverRef"
        }

        subTree{
          name:t=""
          treeName:t="sub.stayFindCover"
        }
      }

      subTree{
        name:t=""
        treeName:t="sub.stayRegroupCheck"
      }
    }
  }
}

repeat{
  count:i=1
  name:t="sub.aggressiveStayReactionTrain"

  sequencer{

    getPointInTrainCapzone{
      posParam:t="regroupPosition"
    }

    recalculateTree{
    }
  }

  sequencer{
    name:t="regroup"

    orderedSelector{

      orderedSelector{

        subTree{
          name:t=""
          refId:t="checkCoverRef"
        }

        subTree{
          name:t=""
          treeName:t="sub.stayFindCover"
        }
      }

      subTree{
        name:t=""
        treeName:t="sub.stayRegroupCheck"
      }
    }
  }

  subTree{
    name:t=""
    treeName:t="sub.chooseMaxStance"
  }

  subTree{
    name:t=""
    treeName:t="sub.deactivateWeapMod"
  }

  subTree{
    name:t=""
    treeName:t="sub.checkDowned"
  }

  subTree{
    name:t=""
    treeName:t="sub.checkBurning"
  }

  subTree{
    name:t=""
    treeName:t="sub.swimUpCheck"
  }

  subTree{
    name:t=""
    treeName:t="sub.tryToOpenDoors"
  }

  subTree{
    name:t=""
    treeName:t="sub.findDangerGrenade"
  }

  subTree{
    name:t=""
    treeName:t="sub.findDangerZone"
  }

  subTree{
    name:t=""
    treeName:t="sub.stayFindDangerCheck"
  }

  subTree{
    name:t=""
    treeName:t="sub.changeStanceWhenInTheSquadLeaderAim"
  }
}

repeat{
  name:t="sub.aggressiveBeh"

  subTree{
    name:t=""
    refId:t="updateRegroupPos"
  }

  subTree{
    name:t=""
    treeName:t="sub.chooseMaxStance"
  }

  subTree{
    name:t=""
    treeName:t="sub.deactivateWeapMod"
  }

  subTree{
    name:t=""
    treeName:t="sub.swimUp"
  }

  subTree{
    name:t=""
    treeName:t="sub.selfExtinguish"
  }

  subTree{
    name:t=""
    treeName:t="sub.selfHealing"
  }

  subTree{
    name:t=""
    treeName:t="sub.dmgZoneEscape"
  }

  subTree{
    name:t=""
    treeName:t="sub.rethrowGrenade"
  }

  subTree{
    name:t=""
    treeName:t="sub.grenadeEscape"
  }

  subTree{
    name:t=""
    treeName:t="sub.bombEscape"
  }

  subTree{
    treeName:t="sub.checkEndCoverAttack"
  }

  setIntVar{
    to:t="grenadeAttackFailed"
    value:i=0
  }

  setIntVar{
    to:t="dangerNearbyBeware"
    value:i=0
  }

  orderedSelector{
    name:t="attack"

    subTree{
      name:t=""
      treeName:t="sub.enemyMelee"
    }

    sequencer{

      isAgentPlayerBot{
      }

      not{

        isSwimming{
        }
      }

      isVarsIntEqual{
        lhs:t="coverAttack"
        rhs_value:i=0
      }

      findDanger{
        paramName:t="shootEnemy"
        radiusParamName:t="enemyVehicleRadius"
        minDanger:r=0.0
        tag:t="vehicle"
      }

      setIntVar{
        to:t="dangerNearbyBeware"
        value:i=1
      }

      setIntVar{
        to:t="grenadeAttackFailed"
        value:i=1
      }

      setIntVar{
        to:t="grenadeAttackFailed"
        value:i=0
      }

      hasGrenade{
      }

      subTree{
        treeName:t="sub.attackVehicle"
      }
    }

    sequencer{

      not{

        isVarsIntEqual{
          lhs:t="coverAttack"
          rhs_value:i=0
        }
      }

      copyIntVar{
        to:t="shootEnemy"
        from:t="coverAttackEnemy"
      }

      setIntVar{
        to:t="dangerNearbyBeware"
        value:i=1
      }

      getTime{
        to:t="enemyNearTime"
      }

      success{

        subTree{
          treeName:t="sub.oneShootAttack"
        }
      }
    }

    sequencer{

      findDanger{
        paramName:t="shootEnemy"
        outSeeTimeParam:t="shootEnemyTime"
        radiusParamName:t="enemyNearRadius"
        minDanger:r=0.1
        tag:t="human"
      }

      setIntVar{
        to:t="dangerNearbyBeware"
        value:i=1
      }

      getTime{
        to:t="enemyNearTime"
      }

      subTree{
        treeName:t="sub.oneShootAttack"
      }
    }

    sequencer{

      isVarsIntEqual{
        lhs:t="dangerNearbyBeware"
        rhs_value:i=0
      }

      findDanger{
        paramName:t="shootEnemy"
        outSeeTimeParam:t="shootEnemyTime"
        radiusParamName:t="enemyRadius"
        minDanger:r=0.1
        tag:t="human"
      }

      subTree{
        treeName:t="sub.oneShootAttack"
      }

      parallel{

        wait{
          range:p2=0.5, 1.0
          resetable:b=yes
        }

        success{

          sequencer{

            checkAtTime{
              timeParam:t="rememberEnemyTime"
              range:p2=0.0, 10.0
            }

            checkTarget{
              targetUnitParam:t="rememberEnemy"
            }

            wanderLook{
              posParam:t="rememberEnemyPos"
              range:p2=0.2, 0.1
              maxStanceParam:t="coverStance"
            }
          }
        }
      }
    }

    failed{

      sequencer{

        isVarsIntEqual{
          lhs:t="dangerNearbyBeware"
          rhs_value:i=0
        }

        decreaseDangerLevel{
          paramName:t="dangerLevel"
          decreaseCoef:r=0.5
        }
      }
    }
  }

  orderedSelector{

    sequencer{

      isVarsIntEqual{
        lhs:t="isInShootState"
        rhs_value:i=1
      }

      initPeriodicTimer{
        timeParam:t="onBulletNearbyTimer"
        timePeriod:p2=2.0, 4.0
      }

      initPeriodicTimer{
        timeParam:t="onTraceableDangerTimer"
        timePeriod:p2=2.0, 4.0
      }

      initPeriodicTimer{
        timeParam:t="onFollowPosFindDangerTimer"
        timePeriod:p2=2.0, 4.0
      }
    }

    continue{
    }
  }

  orderedSelector{

    not{

      isVarsIntEqual{
        lhs:t="coverAttack"
        rhs_value:i=0
      }
    }

    sequencer{
      name:t="followPosition"

      getRegroupPos{
        posParam:t="regroupPosition"
      }

      copyPoint3Var{
        from:t="regroupPosition"
        to:t="storedRegroupPosition"
      }

      setCurrentAiAction{
        state:t="move"
      }

      subTree{
        name:t=""
        treeName:t="sub.move"
      }

      orderedSelector{

        isVarsIntEqual{
          lhs:t="dangerNearbyBeware"
          rhs_value:i=1
        }

        subTree{
          name:t=""
          treeName:t="sub.stay"
        }
      }
    }
  }

  sequencer{

    isVarsIntEqual{
      lhs:t="grenadeAttackFailed"
      rhs_value:i=1
    }

    setIntVar{
      to:t="grenadeAttackFailed"
      value:i=0
    }

    ignoreChance{
      chance:r=0.3
    }

    recalculateTree{
    }
  }

  sequencer{

    isVarsIntEqual{
      lhs:t="tryBuild"
      rhs_value:i=1
    }

    isVarsIntEqual{
      lhs:t="dangerNearbyBeware"
      rhs_value:i=0
    }

    setIntVar{
      to:t="tryBuild"
      value:i=0
    }

    subTree{
      name:t=""
      treeName:t="sub.tryBuildAndPlace"
    }
  }
}

orderedSelector{
  name:t="sub.move"

  reaction{
    event:t="onBulletNearby"

    sequencer{

      periodicTimer{
        timeParam:t="onBulletNearbyTimer"
        timePeriod:p2=2.0, 4.0
      }

      recalculateTree{
      }
    }
  }

  reaction{
    event:t="onTraceableDanger"

    subTree{
      name:t=""
      treeName:t="sub.moveTraceableDangerCheck"
    }
  }

  reaction{
    event:t="onEnemyPlayerNear"

    sequencer{

      findDanger{
        paramName:t="shootEnemy"
        radiusParamName:t="enemyNearRadius"
        minDanger:r=0.1
        tag:t="human"
      }

      increaseDangerLevel{
        paramName:t="dangerLevel"
        targetParam:t="shootEnemy"
      }

      decideOnAttackTarget{
        targetParam:t="shootEnemy"
        targetSeeTimeParam:t="shootEnemyTime"
        stillTimeOutParam:t="attackStillTime"
        turnAngleOutParam:t="attackTurnAngle"
        focusTimeOutParam:t="attackFocusTime"
        checkOnly:b=yes
      }

      recalculateTree{
      }
    }
  }

  reaction{
    event:t="regularCheck"

    subTree{
      name:t=""
      refId:t="aggressiveMoveReaction"
    }
  }

  subTree{
    name:t=""
    treeName:t="sub.moveToCover"
  }

  subTree{
    name:t=""
    treeName:t="sub.moveToRegroupPosition"
  }
}

orderedSelector{
  name:t="sub.aggressiveCheckBuildAndHeal"

  sequencer{

    isAgentPlayerBot{
    }

    orderedSelector{

      subTree{
        name:t=""
        treeName:t="sub.checkBuildAndPlace"
      }

      subTree{
        name:t=""
        treeName:t="sub.checkHealTeammatesAround"
      }

      continue{
      }
    }
  }

  sequencer{

    subTree{
      name:t=""
      treeName:t="sub.checkHealSquadmatesAround"
    }
  }
}

orderedSelector{
  name:t="sub.stay"

  reaction{
    event:t="onBulletNearby"

    sequencer{

      recalculateTree{
      }
    }
  }

  reaction{
    event:t="onTraceableDanger"

    subTree{
      name:t=""
      treeName:t="sub.stayTraceableDangerCheck"
    }
  }

  reaction{
    event:t="onEnemyPlayerNear"

    sequencer{

      findDanger{
        paramName:t="shootEnemy"
        radiusParamName:t="enemyNearRadius"
        minDanger:r=0.1
        tag:t="human"
      }

      recalculateTree{
      }
    }
  }

  reaction{
    event:t="regularCheck"

    subTree{
      name:t=""
      refId:t="aggressiveStayReaction"
    }
  }

  reaction{
    event:t="onSquadMateTrouble"

    sequencer{

      recalculateTree{
      }
    }
  }

  subTree{
    name:t=""
    treeName:t="sub.tryCallArtillery"
  }

  subTree{
    name:t=""
    treeName:t="sub.tryHealTeammateAround"
  }

  subTree{
    name:t=""
    treeName:t="sub.stayInCover"
  }

  subTree{
    name:t=""
    treeName:t="sub.stayAtPos"
  }
}